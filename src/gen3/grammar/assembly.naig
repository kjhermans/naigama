-- Naigama Assembly Grammar

TOP                <- INSTRUCTIONS
S                  <- %s+
__prefix           <- ( '--' [^\n]* '\n' / %s+ )*

INSTRUCTIONS       <- INSTRUCTION+ END
INSTRUCTION        <- {
                        ANYINSTR / BACKCOMMITINSTR / CALLINSTR /
                        CATCHINSTR / CHARINSTR / MASKEDCHARINSTR /
                        CLOSECAPTUREINSTR / COMMITINSTR /
                        ENDREPLACEINSTR / REPLACEINSTR /
                        ISOLATEINSTR / ENDISOLATEINSTR /
                        ENDINSTR / FAILTWICEINSTR / FAILINSTR /
                        JUMPINSTR / NOOPINSTR / TRAPINSTR /
                        OPENCAPTUREINSTR / PARTIALCOMMITINSTR /
                        QUADINSTR /
                        RETINSTR / SETINSTR / RANGEINSTR /
                        SKIPINSTR / SPANINSTR / TESTANYINSTR /
                        TESTCHARINSTR / TESTQUADINSTR /
                        TESTSETINSTR / VARINSTR /
                        COUNTERINSTR / CONDJUMPINSTR /
                        SCR_INSTRUCTION /
                        LABELDEF
                      }

END                <- !.

ANYINSTR           <- { 'any' }
BACKCOMMITINSTR    <- { 'backcommit' } S LABEL
CALLINSTR          <- { 'call' } S LABEL
CATCHINSTR         <- { 'catch' } S LABEL
CHARINSTR          <- { 'char' } S HEXBYTE
MASKEDCHARINSTR    <- { 'maskedchar' } S HEXBYTE S HEXBYTE
CLOSECAPTUREINSTR  <- { 'closecapture' } S SLOT (S TYPE)?
COMMITINSTR        <- { 'commit' } ( S LABEL )?
ENDINSTR           <- { 'end' } ( S CODE )? 
FAILINSTR          <- { 'fail' }
FAILTWICEINSTR     <- { 'failtwice' }
JUMPINSTR          <- { 'jump' } S LABEL
NOOPINSTR          <- { 'noop' }
TRAPINSTR          <- { 'trap' }
OPENCAPTUREINSTR   <- { 'opencapture' } S SLOT
PARTIALCOMMITINSTR <- { 'partialcommit' } ( S LABEL )?
QUADINSTR          <- { 'quad' } S QUAD
REPLACEINSTR       <- { 'replace' } S LABEL S LABEL
ENDREPLACEINSTR    <- { 'endreplace' }
RETINSTR           <- { 'ret' }
SETINSTR           <- { 'set' } S SET
RANGEINSTR         <- { 'range' } S NUMBER S NUMBER
SKIPINSTR          <- { 'skip' } S NUMBER
SPANINSTR          <- { 'span' } S SET
TESTANYINSTR       <- { 'testany' } S LABEL
TESTCHARINSTR      <- { 'testchar' } S HEXBYTE S LABEL ( S AMPERSAND HEXBYTE )?
TESTQUADINSTR      <- { 'testquad' } S QUAD S LABEL
TESTSETINSTR       <- { 'testset' } S SET S LABEL
VARINSTR           <- { 'var' } S SLOT
COUNTERINSTR       <- { 'counter' } S REGISTER S NUMBER
CONDJUMPINSTR      <- { 'condjump' } S REGISTER S LABEL
ISOLATEINSTR       <- { 'isolate' } S SLOT
ENDISOLATEINSTR    <- { 'endisolate' }

LABELDEF           <- { LABEL } COLON

-- script related instructions

SCR_INSTRUCTION    <- SCR_ADD /
                      SCR_CALL /
                      SCR_PUSH /
                      SCR_RET

SCR_ADD            <- { '__s:add' }
SCR_CALL           <- { '__s:call' } S LABEL
SCR_PUSH           <- { '__s:push' } S { LITERAL / FUNCTIONBARRIER }
SCR_RET            <- { '__s:ret' } S?

-- terminals

CODE               <- NUMBER
HEXBYTE            <- { [0-9a-fA-F]^2 }
LABEL              <- { [a-zA-Z0-9_]^1-64 }
NUMBER             <- { [0-9]+ }
QUAD               <- { [0-9a-fA-F]^8 }
SET                <- { [0-9a-fA-F]^64 }
SLOT               <- NUMBER
REGISTER           <- NUMBER
TYPE               <- NUMBER
COLON              <- ':'
AMPERSAND          <- '&'

LITERAL            <- STRINGLITERAL /
                      REGISTERREF /
                      FLOATLITERAL /
                      INTLITERAL /
                      BOOLEANLITERAL /
                      VOIDLITERAL

FUNCTIONBARRIER    <- '__function'

STRINGLITERAL      <- '\'' { ( '\\' ([nrtv\\'] / [0-9]^3) / [^'\\] )* } '\''
REGISTERREF        <- '{' S? { NUMBER } S? '}'
FLOATLITERAL       <- { [0-9]* '.' [0-9]+ }
INTLITERAL         <- { [0-9]+ }
BOOLEANLITERAL     <- { 'true' / 'false' }
VOIDLITERAL        <- '__void'

