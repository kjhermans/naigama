#!/usr/bin/perl

## Program takes as input Naigama assembly, and outputs Naigama subassembly

my $inputfile = shift @ARGV;
my $outputfile = shift @ARGV;

my ($in, $out);

if ($inputfile eq '-') {
  $in = *STDIN;
} else {
  open $in, '<', $inputfile || die "Could not open $inputfile";
}

if (!defined($outputfile)) {
  $outputfile = '-';
}
if ($outputfile eq '-') {
  $out = *STDOUT;
} else {
  open $out, '>', $outputfile || die "Could not open $outputfile";
}

my $input = do { local $/; <$in> };

my $ident='[#a-zA-Z0-9_]+';
my $S='\\s+';
my $number='[0-9]+';
my $eos='(\\s+|$)';
my $hex='[0-9A-Fa-f]{2}';
my $set='[0-9A-Fa-f]{64}';
my $reg='REG([0-9]+)';
my $C='\\s*,\\s*';

my $memcode   = 0x20000000;
my $meminput  = 0x40000000;
my $memstack  = 0xc0000000;
my $memact    = 0x80000000;
my $memregs   = 0x00000000;

my $failreg   = $memregs;
my $codeptr   = $memregs + 16;
my $codelen   = $memregs + 20;
my $inputpos  = $memregs + 24;
my $inputlen  = $memregs + 28;
my $actionlen = $memregs + 32;
my $stacklen  = $memregs + 36;
my $reg0      = $memregs + 64;

my $offset    = 0;

my $INSTR_NOOP     = 0x00000000; my $renoop = '^NOOP$eos';
my $INSTR_JUMP     = 0x00000001; my $rejump = "^JUMP$S<($ident)>$eos";
my $INSTR_JUMPREF  = 0x00000002; my $rejref = "^JUMPREF$S<($ident)>$eos";
my $INSTR_POP      = 0x00000003; my $repop  = "^POP$S$reg$eos";
my $INSTR_PUSH     = 0x00000004; my $repush = "^PUSH$S($ident)$eos";
my $INSTR_PUSHLIT  = 0x00000005; my $replit = "^PUSHLIT$S<?($ident)>?$eos";
my $INSTR_ASSIGN  = 0x00000006; my $reassn = "^ASSIGN$S($ident)$C($ident)$eos";
my $INSTR_INC      = 0x00000007; my $reinc  = "^INC$S($ident)$C($ident)$eos";
my $INSTR_FAIL  = 0x00000008; my $refail = "^FAIL$S($ident)$C<?($ident)>?$eos";
my $INSTR_LT       = 0x00000009; my $relt   = "^LT$S($ident)$C($ident)$eos";
my $INSTR_CMP      = 0x0000000a; my $recmp  = "^CMP$S($ident)$C($ident)$eos";
my $INSTR_ADD   = 0x0000000b; my $readd = "^ADD$S$reg$C($ident)$C($ident)$eos";
my $INSTR_SUB   = 0x0000000c; my $resub = "^SUB$S$reg$C($ident)$C($ident)$eos";

while (length($input)) {
  while ($input =~ s/^(\s+|--[^\n]*\n)//) { }
  if ($input =~ s/^($ident)://) {
    my $label = $1;
    if (defined($labels->{$label})) {
      die "Doubly defined label $label";
    }
    $labels->{$label} = $offset;

  } elsif ($input =~ s/$renoop//) {
    $offset += 4;

  } elsif ($input =~ s/$rejump//) {
    $offset += 4;

  } elsif ($input =~ s/$rejref//) {
    $offset += 4;

  } elsif ($input =~ s/$repop//) {
    $offset += 4;

  } elsif ($input =~ s/$repush//) {
    $offset += 4;

  } elsif ($input =~ s/$replit//) {
    $offset += 4;

  } elsif ($input =~ s/$reassn//) {
    $offset += 4;

  } elsif ($input =~ s/$reinc//) {
    $offset += 4;

  } elsif ($input =~ s/$refail//) {
    $offset += 4;

  } elsif ($input =~ s/$relt//) {
    $offset += 4;

  } elsif ($input =~ s/$renoop//) {
    $offset += 4;

  } elsif ($input =~ s/$recmp//) {
    $offset += 4;

  } elsif ($input =~ s/$readd//) {
    $offset += 4;

  } elsif ($input =~ s/$resub//) {
    $offset += 4;

  } else {
    my $line =~ s/^([^\n]+)$eos//;
    die "Unknown input $1";
  }
}

$offset = 0;

while (length($input)) {
  while ($input =~ s/^(\s+|--[^\n]*\n)//) { }
  if ($input =~ s/^($ident)://) {

  } elsif ($input =~ s/$renoop//) {
    syswrite $out, pack('N', $INSTR_NOOP);

  } elsif ($input =~ s/$refail//) {
    my ($cmd, $label) = ($1, $2);
    my $address = $labels->{$label} || die "Label $label unknown";
    syswrite $out, pack('N', $INSTR_FAIL);
    if ($cmd eq 'RAISE') {
      syswrite $out, pack('N', $INSTR_RAISE);
    } elsif ($cmd eq 'JUMP') {
      syswrite $out, pack('N', $INSTR_JUMP);
    }
    syswrite $out, pack('N', $address);

  } elsif ($input =~ s/$rejump//) {
    my $label = $1;
    my $address = $labels->{$label} || die "Label $label unknown";
    syswrite $out, pack('N', $INSTR_JUMP);
    syswrite $out, pack('N', $address);

  } elsif ($input =~ s/$rejref//) {
    my $reg = $1;
    my $address = $reg0 + (4 * $reg);
    syswrite $out, pack('N', $INSTR_JUMP);
    syswrite $out, pack('N', $address);

  } elsif ($input =~ s/$repop//) {
    my $reg = $1;
    my $address = $reg0 + (4 * $reg);
    syswrite $out, pack('N', $INSTR_POP);
    syswrite $out, pack('N', $address);

  } elsif ($input =~ s/$repush//) {
    my $reg = $1;
    my $address = $reg0 + (4 * $reg);
    syswrite $out, pack('N', $INSTR_PUSH);
    syswrite $out, pack('N', $address);

  } elsif ($input =~ s/$replit//) {

  } elsif ($input =~ s/$reassn//) {

  } elsif ($input =~ s/$reinc//) {

  } elsif ($input =~ s/$relt//) {

  } elsif ($input =~ s/$recmp//) {

  } elsif ($input =~ s/$readd//) {

  } elsif ($input =~ s/$resub//) {

  }
}

1;
