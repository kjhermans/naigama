#!/usr/bin/perl

use Data::Dumper;

print STDERR "This is Naigama decompiler Generation 3.\n";

my ($inputfile, $outputfile) = ( '-', '-' );

while (my $arg = shift @ARGV) {
  if ($arg =~ s/^-//) {
    while ($arg =~ s/^(.)//) {
      my $option = $1;
      if ($option eq 'i') {
        $inputfile = shift @ARGV;
      } elsif ($option eq 'o') {
        $outputfile = shift @ARGV;
      } else {
        die "Unknown command line option '-$option'";
      }
    }
  } else {
    $inputfile = $arg || '-';
    $outputfile = shift @ARGV || '-';
    last;
  }
}

my ($in, $out);

if ($inputfile eq '-') {
  $in = *STDIN;
} else {
  open $in, '<', $inputfile || die "Could not open $inputfile";
}

if ($outputfile eq '-') {
  $out = *STDOUT;
} else {
  open $out, '>', $outputfile || die "Could not open $outputfile";
}

my @input;
{
  while (my $line = <$in>) {
    while (length($line)) {
      $line =~ s/^[ \n\r\t\v]+//;
      if ($line =~ s/^([a-zA-Z0-9_]+:)//) {
        push @input, $1;
      }
      $line =~ s/^[ \n\r\t\v]+//;
      $line =~ s/[ \n\r\t\v]+$//;
      if (length($line)) {
        push @input, $line;
        last;
      }
    }
  }
  close $in;
}

print $out "-- Generated by the gen3 decompiler.\n";
decompile(\@input);

exit 0;

##---- functions -----------------------------------------------------------##

sub decompile
{
  my $rule = { instr => [], name => 'RULE_0' };
  my @rules = ( $rule );
  my $asm = shift;
  for (my $i=0; $i < scalar(@{$asm}); $i++) {
    push @{$rule->{instr}}, $asm->[$i];
    if ($asm->[$i] eq 'ret') {
      my $newrule = { instr => [], name => 'RULE_' . scalar(@rules) };
      push @rules, $newrule;
      $rule = $newrule;
    }
    if (scalar(@{$rule->{instr}}) eq '1' && $asm->[$i] =~ /([a-zA-Z0-9_]+):/) {
      $rule->{label} = $1;
    }
  }
  for (my $i=0; $i < scalar(@rules); $i++) {
    for (my $j=0; $j < scalar(@{$rules[ $i ]->{instr}}); $j++) {
      if ($rules[ $i ]->{instr}[ $j ] =~ /^char\s+([0-9a-fA-F]{2})/) {
        my $asc = hex($1);
        if ($asc >= 32 & $asc < 127) {
          if (chr($asc) == '\\' || chr($asc) == '\'') {
            $rules[ $i ]->{instr}[ $j ] = { grammar => '\'\\' . chr($asc) . '\'' };
          } else {
            $rules[ $i ]->{instr}[ $j ] = { grammar => '\'' . chr($asc) . '\'' };
          }
        } else {
          $rules[ $i ]->{instr}[ $j ] = { grammar => '0x'.$1 };
        }
      }
    }
  }
print STDERR Dumper \@rules;
}

1;
