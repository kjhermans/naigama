#!/usr/bin/perl

##DEADBEEF
my $INSTR_ANY = 0x00000371;
my $INSTR_BACKCOMMIT = 0x000403de;
my $INSTR_CALL = 0x000403db;
my $INSTR_CATCH = 0x00040353;
my $INSTR_CHAR = 0x0004031b;
my $INSTR_CLOSECAPTURE = 0x00040312;
my $INSTR_COMMIT = 0x0004031e;
my $INSTR_CONDJUMP = 0x000803c5;
my $INSTR_COUNTER = 0x000803aa;
my $INSTR_END = 0x00040084;
my $INSTR_ENDREPLACE = 0x0000038e;
my $INSTR_FAIL = 0x0000034d;
my $INSTR_FAILTWICE = 0x000003ee;
my $INSTR_JUMP = 0x000403e7;
my $INSTR_MASKEDCHAR = 0x000803dd;
my $INSTR_NOOP = 0x00000000;
my $INSTR_OPENCAPTURE = 0x00040359;
my $INSTR_PARTIALCOMMIT = 0x000403b2;
my $INSTR_QUAD = 0x0004035f;
my $INSTR_RANGE = 0x0008036c;
my $INSTR_REPLACE = 0x00080342;
my $INSTR_RET = 0x000003a9;
my $INSTR_SCR_ADD = 0x00000555;
my $INSTR_SCR_ASSIGN = 0x000005bd;
my $INSTR_SCR_BITAND = 0x000005ed;
my $INSTR_SCR_BITANDIS = 0x0000058b;
my $INSTR_SCR_BITNOT = 0x000005e8;
my $INSTR_SCR_BITNOTIS = 0x0000055c;
my $INSTR_SCR_BITOR = 0x0000050c;
my $INSTR_SCR_BITORIS = 0x000005f5;
my $INSTR_SCR_BITXOR = 0x000005a6;
my $INSTR_SCR_BITXORIS = 0x000005f9;
my $INSTR_SCR_CALL = 0x000405be;
my $INSTR_SCR_CONDJUMP = 0x0008057b;
my $INSTR_SCR_DEC = 0x000005b8;
my $INSTR_SCR_DIV = 0x00000548;
my $INSTR_SCR_EQUALS = 0x0000050f;
my $INSTR_SCR_GT = 0x000005ac;
my $INSTR_SCR_GTEQ = 0x000005c9;
my $INSTR_SCR_INC = 0x000005c3;
my $INSTR_SCR_JUMP = 0x0004059a;
my $INSTR_SCR_LOGAND = 0x00000500;
my $INSTR_SCR_LOGNOT = 0x0000057e;
my $INSTR_SCR_LOGOR = 0x000005d4;
my $INSTR_SCR_LT = 0x0000057d;
my $INSTR_SCR_LTEQ = 0x0000052d;
my $INSTR_SCR_MUL = 0x00000514;
my $INSTR_SCR_NEQUALS = 0x00000550;
my $INSTR_SCR_POP = 0x00000528;
my $INSTR_SCR_POW = 0x00000503;
my $INSTR_SCR_PUSH = 0x00000577;
my $INSTR_SCR_RET = 0x00000533;
my $INSTR_SCR_SHIFTIN = 0x0000050a;
my $INSTR_SCR_SHIFTINIS = 0x00000518;
my $INSTR_SCR_SHIFTOUT = 0x00000517;
my $INSTR_SCR_SHIFTOUTIS = 0x00000590;
my $INSTR_SCR_SUB = 0x000005cf;
my $INSTR_SET = 0x00200335;
my $INSTR_SKIP = 0x00040305;
my $INSTR_SPAN = 0x0020034e;
my $INSTR_TESTANY = 0x00040311;
my $INSTR_TESTCHAR = 0x0008039f;
my $INSTR_TESTQUAD = 0x00080374;
my $INSTR_TESTSET = 0x00240382;
my $INSTR_TRAP = 0xffffffff;
my $INSTR_VAR = 0x000403b7;
#DEADBEEF

my $inputfile = shift @ARGV;
my $outputfile = shift @ARGV;

my ($in, $out);

if ($inputfile eq '-') {
  $in = *STDIN;
} else {
  open $in, '<', $inputfile || die "Could not open $inputfile";
}

if (!defined($outputfile)) {
  $outputfile = '-';
}
if ($outputfile eq '-') {
  $out = *STDOUT;
} else {
  open $out, '>', $outputfile || die "Could not open $outputfile";
}

my $labelmap;
if ($inputfile ne '-' && -f "$inputfile.labelmap") {
  $labelmap = eval( `cat "$inputfile.labelmap"` );
}

sub absorb_binary
{
  my $result = '';
  my $path = shift; die "Found not found" if (! -f $path);
  die "Error $@ opening $bytecodefile" if (!open(FILE, '<', $path));
  binmode FILE;
  my $buf;
  while (1) {
    my $n = sysread(FILE, $buf, 1024);
    if (!$n) {
      close FILE;
      return $result;
    }
    $result .= $buf;
  }
}

my $bytecode = absorb_binary($inputfile);

my $offset = 0;
while ($offset < length($bytecode)) {
  my $label = labelreverse($offset);
  my $opcode = unpack('N', substr($bytecode, $offset, 4));
  if ($opcode == $INSTR_NOOP) {
    print $out "$offset: noop";
    $offset += 4;
  } elsif ($opcode == $INSTR_ANY) {
    print $out "$offset: any";
    $offset += 4;
  } elsif ($opcode == $INSTR_BACKCOMMIT) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: backcommit $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_SKIP) {
    my $n = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: skip $n";
    $offset += 8;
  } elsif ($opcode == $INSTR_CALL) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    my $funclabel = labelreverse($address);
    if (!defined($funclabel)) {
      print $out "$offset: call $address";
    } else {
      print $out "$offset: call $address -- Calling $funclabel";
    }
    $offset += 8;
  } elsif ($opcode == $INSTR_CHAR) {
    my $char = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: char " . sprintf("%.2x", $char);
    $offset += 8;
  } elsif ($opcode == $INSTR_MASKEDCHAR) {
    my $char = unpack('N', substr($bytecode, $offset + 4, 4));
    my $mask = unpack('N', substr($bytecode, $offset + 8, 4));
    print $out "$offset: maskedchar " . sprintf("%.2x", $char) .
               " " . sprintf("%.2x", $mask);
    $offset += 12;
  } elsif ($opcode == $INSTR_QUAD) {
    my $char = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: quad " . sprintf("%.8x", $char);
    $offset += 8;
  } elsif ($opcode == $INSTR_CATCH) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: catch $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_CLOSECAPTURE) {
    my $slot = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: closecapture $slot";
    $offset += 8;
  } elsif ($opcode == $INSTR_COMMIT) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: commit $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_END) {
    my $code = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: end $code";
    $offset += 8;
  } elsif ($opcode == $INSTR_FAIL) {
    print $out "$offset: fail";
    $offset += 4;
  } elsif ($opcode == $INSTR_FAILTWICE) {
    print $out "$offset: failtwice";
    $offset += 4;
  } elsif ($opcode == $INSTR_JUMP) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: jump $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_OPENCAPTURE) {
    my $slot = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: opencapture $slot";
    $offset += 8;
  } elsif ($opcode == $INSTR_PARTIALCOMMIT) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: partialcommit $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_REPLACE) {
    my $address1 = unpack('N', substr($bytecode, $offset + 4, 4));
    my $address2 = unpack('N', substr($bytecode, $offset + 8, 4));
    print $out "$offset: replace $address1 $address2";
    $offset += 12;
  } elsif ($opcode == $INSTR_STARTREPLACE) {
    print $out "$offset: startreplace";
    $offset += 4;
  } elsif ($opcode == $INSTR_ENDREPLACE) {
    print $out "$offset: endreplace";
    $offset += 4;
  } elsif ($opcode == $INSTR_RET) {
    print $out "$offset: ret";
    $offset += 4;
  } elsif ($opcode == $INSTR_SET) {
    print $out "$offset: set ";
    for (my $i=0; $i < 32; $i++) {
      print $out sprintf("%.2x", ord(substr($bytecode, $offset + 4 + $i, 1)));
    }
    if ($ENV{SHOWSET}) {
      debugset($bytecode, $offset + 4);
    }
    $offset += 36;
  } elsif ($opcode == $INSTR_SPAN) {
    print $out "$offset: span ";
    for (my $i=0; $i < 32; $i++) {
      print $out sprintf("%.2x", ord(substr($bytecode, $offset + 4 + $i, 1)));
    }
    if ($ENV{SHOWSET}) {
      debugset($bytecode, $offset + 4);
    }
    $offset += 36;
  } elsif ($opcode == $INSTR_TESTANY) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: testany $address";
    $offset += 8;
  } elsif ($opcode == $INSTR_TESTCHAR) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    my $mask = unpack('n', substr($bytecode, $offset + 8, 2));
    my $char = unpack('n', substr($bytecode, $offset + 10, 2));
    print $out "$offset: testchar " . sprintf("%.2x", $char) . " $address";
    if ($mask) {
      print $out sprintf("&%.2x", $mask);
    }
    $offset += 12;
  } elsif ($opcode == $INSTR_TESTQUAD) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    my $quad = unpack('N', substr($bytecode, $offset + 8, 4));
    print $out "$offset: testquad " . sprintf("%.8x", $char) . " $address";
    $offset += 12;
  } elsif ($opcode == $INSTR_TESTSET) {
    my $address = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: testset ";
    for (my $i=0; $i < 32; $i++) {
      print $out sprintf("%.2x", ord(substr($bytecode, $offset + 8 + $i, 1)));
    }
    print $out " $address";
    if ($ENV{SHOWSET}) {
      debugset($bytecode, $offset + 8);
    }
    $offset += 40;
  } elsif ($opcode == $INSTR_VAR) {
    my $var = unpack('N', substr($bytecode, $offset + 4, 4));
    print $out "$offset: var $var";
    $offset += 8;
  } elsif ($opcode == $INSTR_COUNTER) {
    my $register = unpack('N', substr($bytecode, $offset + 4, 4));
    my $value = unpack('N', substr($bytecode, $offset + 8, 4));
    print $out "$offset: counter $register $value";
    $offset += 12;
  } elsif ($opcode == $INSTR_CONDJUMP) {
    my $register = unpack('N', substr($bytecode, $offset + 4, 4));
    my $jump = unpack('N', substr($bytecode, $offset + 8, 4));
    print $out "$offset: condjump $register $jump";
    $offset += 12;
  } else {
    print $out "-- Unknown opcode $opcode\n";
    die "Unknown opcode $opcode";
  }
  if (defined($label) && $label ne 'unknown') {
    print $out "        -- = $label";
  }
  print $out "\n";
}

sub labelreverse
{
  my $address = shift;
  my $result;
  foreach my $key (keys(%{$labelmap})) {
    if ($labelmap->{$key} eq $address) {
      if (!defined($result) || length($key) < length($result)) {
        $result = $key;
      }
    }
  }
  return $result;
}

sub debugset
{
  my ($bytecode, $offset) = @_;
  for (my $i=0; $i < 32; $i++) {
    my $byte = substr($bytecode, $offset + $i, 1);
    for (my $j=0; $j < 8; $j++) {
      if (ord($byte) & (1 << $j)) {
        my $value = (($i * 8) + $j);
        print $out "\n-- SET: " . sprintf("%.2x", $value);
        if ($value > 32 && $value < 127) {
          print $out " '" . chr($value) . "'";
        }
      }
    }
  }
}

1;
