-- Naigama Grammar Grammar

GRAMMAR            <- ( DEFINITION+ / SINGLE_EXPRESSION ) END

S                  <- %s+

MULTILINECOMMENT   <- '--[[' ( !']]' .)* ']]'

COMMENT            <- '--' [^\n]* '\n'

__prefix           <- ( MULTILINECOMMENT / COMMENT / S )*

END                <- !.

DEFINITION         <- GLOBALVARDECL /
                      FUNCDECL /
                      TYPEDECL /
                      RULE

SINGLE_EXPRESSION  <- EXPRESSION

RULE               <- IDENT LEFTARROW EXPRESSION

EXPRESSION         <- ALTERNATIVES /
                      TERMS

ALTERNATIVES       <- TERMS OR EXPRESSION

TERMS              <- TERM+

TERM               <- SCANMATCHER / QUANTIFIEDMATCHER

SCANMATCHER        <- ( NOT / AND ) MATCHER

QUANTIFIEDMATCHER  <- MATCHER QUANTIFIER?

QUANTIFIER         <- Q_ZEROORONE /
                      Q_ONEORMORE /
                      Q_ZEROORMORE /
                      Q_FROMTO /
                      Q_UNTIL /
                      Q_FROM /
                      Q_SPECIFIC /
                      Q_VAR

Q_ZEROORONE        <- '?'
Q_ONEORMORE        <- '+'
Q_ZEROORMORE       <- '*'
Q_FROMTO           <- '^' { [0-9]+ } '-' { [0-9]+ }
Q_UNTIL            <- '^' '-' { [0-9]+ }
Q_FROM             <- '^' { [0-9]+ } '-'
Q_SPECIFIC         <- '^' { [0-9]+ }
Q_VAR              <- '^' BOPEN VARREFERENCE BCLOSE

MATCHER            <- ANY /
                      SET /
                      STRING /
                      BITMASK /
                      HEXLITERAL /
                      VARCAPTURE /
                      CAPTURE /
                      GROUP /
                      MACRO /
                      ENDFORCE /
                      VARREFERENCE /
                      REFERENCE /
                      LIMITEDCALL

BITMASK            <- '|' [0-9a-fA-F]^2 '|' [0-9a-fA-F]^2 '|'

VARCAPTURE         <- CBOPEN COLON IDENT CAPTURETYPE? COLON
                      EXPRESSION CBCLOSE CAPTUREEND

CAPTURETYPE        <- SEMICOLON TYPE

TYPE               <- 'uint32' / 'int32'

CAPTURE            <- CBOPEN EXPRESSION CBCLOSE CAPTUREEND

GROUP              <- BOPEN EXPRESSION BCLOSE

CAPTUREEND         <- ( REPLACE / RECYCLE )?

SET                <- ABOPEN SETNOT? (
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] } '-' 
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] }
                        /
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] }
                      )+ ABCLOSE

VARREFERENCE       <- '$' ( IDENT / NUMBER ) MASK?

MASK               <- '|' { [0-9A-Fa-f]^2 }

REFERENCE          <- !( KW_TYPE / KW_IMPORT / KW_FUNCTION / KW_VAR ) IDENT !LEFTARROW

LIMITEDCALL        <- '<<' %s* LCMODES %s* ':' %s* LCPARAM %s* ':' %s* IDENT %s* '>>'
LCMODES            <- 'ruint32'
LCPARAM            <- [^: \n\r\t\v]*

REPLACE            <- RIGHTARROW REPLACETERMS

REPLACETERMS       <- REPLACETERM+

REPLACETERM        <- STRINGLITERAL / HEXLITERAL / VARREFERENCE

RECYCLE            <- FATARROW IDENT

LEFTARROW          <- '<-'
RIGHTARROW         <- '->'
FATARROW           <- '=>'
NOT                <- '!'
AND                <- '&'
MACRO              <- '%' [a-zA-Z] [a-zA-Z0-9]*
ENDFORCE           <- '__end' S NUMBER
HEXLITERAL         <- '0x' [0-9a-fA-F]^2
NUMBER             <- [0-9]+
STRING             <- STRINGLITERAL 'i'?
OR                 <- '/'
ANY                <- '.'
SETNOT             <- '^'

-- scripting engine

IMPORTDECL     <- KW_IMPORT STRING SEMICOLON

TYPEDECL       <- KW_TYPE S IDENT
                  ABOPEN
                  ( VARDECL / TYPEDECL )+
                  ABCLOSE

FUNCDECL       <- KW_FUNCTION S IDENT FUNCPARAMDECL FUNCBODY

FUNCPARAMDECL  <- BOPEN ( PARAMDECL ( COMMA PARAMDECL )* )? BCLOSE

PARAMDECL      <- SCR_TYPE S IDENT / IDENT

FUNCBODY       <- CBOPEN FUNCSTMT* CBCLOSE

GLOBALVARDECL  <- VARDECL

FUNCSTMT       <- ST_IF /
                  ST_WHILE /
                  ST_CATCH /
                  ST_RETURN /
                  VARDECL /
                  ASSIGNMENT /
                  SCR_EXPRESSION? SEMICOLON

BLOCKSTMT      <- ST_IF /
                  ST_WHILE /
                  ST_CATCH /
                  ST_RETURN /
                  ST_LOOPCTL /
                  VARDECL /
                  ASSIGNMENT /
                  SCR_EXPRESSION? SEMICOLON

ST_IF          <- KW_IF CONDITION BLOCK IF_ELSIF* IF_ELSE?

CONDITION      <- BOPEN SCR_EXPRESSION BCLOSE

BLOCK          <- CBOPEN BLOCKSTMT* CBCLOSE

IF_ELSIF       <- KW_ELSIF CONDITION BLOCK

IF_ELSE        <- KW_ELSE BLOCK

ST_WHILE       <- KW_WHILE CONDITION BLOCK

ST_CATCH       <- KW_CATCH BLOCK

ST_RETURN      <- KW_RETURN SCR_EXPRESSION? SEMICOLON

ST_LOOPCTL     <- ( KW_BREAK / KW_CONTINUE ) SEMICOLON

VARDECL        <- KW_VAR S ( SCR_TYPE S IDENT / IDENT )
                    ( ASSIGN SCR_EXPRESSION )? SEMICOLON

ASSIGNMENT     <- SCR_REFERENCE ASSIGN SCR_EXPRESSION SEMICOLON

SCR_TYPE       <- IDENT

-- Operator precedence from
-- https://en.cppreference.com/w/c/language/operator_precedence

SCR_EXPRESSION <- BINOP_P12

BINOP_P12      <- BINOP_P11 ( ( LOGOR )
                  BINOP_P11 )*
BINOP_P11      <- BINOP_P10 ( ( LOGAND )
                  BINOP_P10 )*
BINOP_P10      <- BINOP_P09 ( ( BITOR )
                  BINOP_P09 )*
BINOP_P09      <- BINOP_P08 ( ( BITXOR )
                  BINOP_P08 )*
BINOP_P08      <- BINOP_P07 ( ( BITAND )
                  BINOP_P07 )*
BINOP_P07      <- BINOP_P06 ( ( EQUALS / NEQUALS )
                  BINOP_P06 )*
BINOP_P06      <- BINOP_P05 ( ( LTEQ / LT / GTEQ / GT )
                  BINOP_P05 )*
BINOP_P05      <- BINOP_P04 ( ( LSHIFT / RSHIFT )
                  BINOP_P04 )*
BINOP_P04      <- BINOP_P03 ( ( ADD / SUB )
                  BINOP_P03 )*
BINOP_P03      <- ( SCR_TERM ) ( ( MUL / DIV / POW )
                  ( SCR_TERM ) )*

UNOP           <- LOGNOT / BITNOT

SCR_TERM       <- FUNCTIONCALL /
                  BOPEN SCR_EXPRESSION BCLOSE /
                  LITERAL /
                  SCR_UREFERENCE

SCR_UREFERENCE <- UNOP* SCR_REFERENCE

FUNCTIONCALL   <- IDENT ARGSLIST

ARGSLIST       <- BOPEN
                  ( SCR_EXPRESSION ( COMMA SCR_EXPRESSION )* )?
                  BCLOSE

SCR_REFERENCE  <- IDENT ( INDEX* ( DOT SCR_REFERENCE )* )

INDEX          <- ABOPEN SCR_EXPRESSION ABCLOSE

LITERAL        <- STRINGLITERAL /
                  LISTLITERAL /
                  FLOATLITERAL /
                  INTLITERAL /
                  BOOLEANLITERAL

STRINGLITERAL  <- '\'' { ( '\\' ([nrtv\\'] / [0-9]^3) / [^'\\] )* } '\''
LISTLITERAL    <- ABOPEN ( LISTELT ( COMMA LISTELT )* )? ABCLOSE
LISTELT        <- SCR_TERM
FLOATLITERAL   <- [0-9]* '.' [0-9]+
INTLITERAL     <- [0-9]+
BOOLEANLITERAL <- 'true' / 'false'

KW_IMPORT      <- 'import'
KW_TYPE        <- 'type'
KW_FUNCTION    <- 'function'
KW_VAR         <- 'var'
KW_WHILE       <- 'while'
KW_RETURN      <- 'return'
KW_IF          <- 'if'
KW_ELSIF       <- 'elsif'
KW_ELSE        <- 'else'
KW_BREAK       <- 'break'
KW_CONTINUE    <- 'continue'
KW_CATCH       <- 'catch'

IDENT          <- [a-zA-Z_][a-zA-Z0-9_]^0-63
BOPEN          <- '('
BCLOSE         <- ')'
CBOPEN         <- '{'
CBCLOSE        <- '}'
ABOPEN         <- '['
ABCLOSE        <- ']'
ASSIGN         <- '='
EQUALS         <- '=='
NEQUALS        <- '!='
LT             <- '<' !'='
GT             <- '>' !'='
LTEQ           <- '<='
GTEQ           <- '>='
SEMICOLON      <- ';'
COLON          <- ':'
POW            <- '**'
MUL            <- '*' !'*'
DIV            <- '/'
ADD            <- '+'
SUB            <- '-'
LOGAND         <- '&&'
LOGOR          <- '||'
LOGNOT         <- '!'
BITAND         <- '&' 
BITOR          <- '|' 
BITXOR         <- '^'
BITNOT         <- '~'
COMMA          <- ','
DOT            <- '.'
LSHIFT         <- '<<'
RSHIFT         <- '>>'
