#[cfg(test)]
mod tests {



  #[test]
  fn json()
  {
    let grammar = r#"
TOP          <- JSON
__prefix     <- %s*
JSON         <- HASH END
HASH         <- CBOPEN OPTHASHELTS CBCLOSE
OPTHASHELTS  <- HASHELTS?
HASHELTS     <- HASHELT COMMA HASHELTS / HASHELT
HASHELT      <- STRING COLON VALUE
ARRAY        <- ABOPEN OPTARRAYELTS ABCLOSE
OPTARRAYELTS <- ARRAYELTS?
ARRAYELTS    <- VALUE COMMA ARRAYELTS / VALUE
VALUE        <- STRING / FLOAT / INT / BOOL / NULL / HASH / ARRAY
STRING       <- { '"' ( '\\' ([nrtv"] / [0-9]^3) / [^"\\] )* '"' }
INT          <- { [0-9]+ }
FLOAT        <- { [0-9]* '.' [0-9]+ }
BOOL         <- { 'true' / 'false' }
NULL         <- { 'null' }
CBOPEN       <- '{'
CBCLOSE      <- '}'
ABOPEN       <- '['
ABCLOSE      <- ']'
COMMA        <- ','
COLON        <- ':'
END          <- !.
    "#.to_string();
    let input = r#"
{
  "widget": {
    "debug": true,
    "window": {
        "title": "Sample Konfabulator Widget",
        "name": "main_window",
        "width": 500,
        "height": 500
    },
    "image": {
        "src": { "foo" : "bar", "bar" : 0.23 },
        "name": "sun1",
        "hOffset": 250.0,
        "vOffset": 250.5,
        "alignment": "center"
    },
    "text": {
        "data": [ "some", "sub", "array", 3, 5.7, false, null ],
        "size": 36,
        "style": null,
        "name": "text1",
        "hOffset": 250,
        "vOffset": 100,
        "alignment": "center",
        "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
    }
  }
}
    "#.as_bytes().to_vec();
    assert!(!crate::naigama::naig_execute(& grammar, & input).is_err(), "JSON parser error.")
  }



  #[test]
  fn oid()
  {
    let oidgrammar = "
TOP       <- LIST
BERLENGTH <- & |00|80| { . } /
             0x81 { . } / 0x82 { .. } / 0x83 { ... } / 0x84 { .... }
LIST      <- 0x30 BERLENGTH <<ruint32:$_:OBJECTS>>
OBJECTS   <- OID IPV4
OID       <- 0x06 BERLENGTH <<ruint32:$_:OIDVALUE>>
IPV4      <- 0x40 0x04 { .... }
OIDVALUE <- { { . } { |80|80|* |00|80| }* }
    ".to_string();
    let oid : [ u8; 26 ] = [
      0x30, 0x18, 0x06, 0x10, 0x2B, 0x06, 0x01, 0x04,
      0x01, 0x81, 0xE0, 0x6B, 0x02, 0x02, 0x06, 0x01,
      0x06, 0x03, 0x01, 0x01, 0x40, 0x04, 0xC0, 0xA8,
      0x50, 0x01,
    ];
    assert!(!crate::naigama::naig_execute(& oidgrammar, & oid.to_vec()).is_err(), "OID parser error.")
  }




  #[test]
  fn cert()
  {
    let grammar = "
CERTIFICATE    <- SEQUENCE BERLENGTH <<ruint32:$_:CERTCONTENT>>

BERLENGTH      <- & |00|80| { . } / 0x81 { . } / 0x82 { .. } / 0x83 { ... } / 0x84 { .... }

CERTCONTENT    <- TBSCERTIFICATE
                  SIGNATUREALGORITHM
                  SIGNATUREVALUE
TBSCERTIFICATE <- SEQUENCE BERLENGTH <<ruint32:$_:TBSCERTCONTENT>>
TBSCERTCONTENT <- VERSION
                  SERIALNUMBER
                  SIGNATURE
                  ISSUER
                  VALIDITY
                  SUBJECT
                  SUBJECTPUBKEYINFO
                  ISSUERUNIQUEID ?
VERSION        <- GCTXSPCLASS
SERIALNUMBER   <- INTEGER
SIGNATURE      <- SEQUENCE BERLENGTH <<ruint32:$_:ALGIDENTCONT>>
ALGIDENTCONT   <- ALGORITHM
                  PARAMETERS ?
ALGORITHM      <- { OID }
PARAMETERS     <- ANY
ISSUER         <- SEQUENCE BERLENGTH <<ruint32:$_:ISSUERCONTENT>>
ISSUERCONTENT  <- { ISSUERNV }*
ISSUERNV       <- SET BERLENGTH <<ruint32:$_:ISSUERNV_>>
ISSUERNV_      <- SEQUENCE BERLENGTH <<ruint32:$_:ISSUERNV__>>
ISSUERNV__     <- ISSUERNAME ISSUERVALUE
ISSUERNAME     <- { OID }
ISSUERVALUE    <- { ANY }
SIGNATUREALGORITHM <- SEQUENCE BERLENGTH <<ruint32:$_:SIGALGCONTENT>>
SIGALGCONTENT  <- OID ANY?
SIGNATUREVALUE <- BITSTRING BERLENGTH <<ruint32:$_:SIGVALCONTENT>>
SIGVALCONTENT  <- . { .* }
VALIDITY       <- SEQUENCE BERLENGTH <<ruint32:$_:VALIDITYCONTENT>>
VALIDITYCONTENT <- VALIDFROM VALIDUNTIL
VALIDFROM      <- TIMESTAMP
VALIDUNTIL     <- TIMESTAMP
SUBJECT        <- SEQUENCE BERLENGTH <<ruint32:$_:SUBJECTCONTENT>>
SUBJECTCONTENT <- SUBJENTRY*
SUBJENTRY      <- SET BERLENGTH <<ruint32:$_:SUBJENTRYNV_>>
SUBJENTRYNV_   <- SEQUENCE BERLENGTH <<ruint32:$_:SUBJENTRYNV__>>
SUBJENTRYNV__  <- SUBJENTRYNAME SUBJENTRYVALUE
SUBJENTRYNAME  <- { OID }
SUBJENTRYVALUE <- { ANY }
SUBJECTPUBKEYINFO <- SEQUENCE BERLENGTH <<ruint32:$_:SPKICONTENT>>
SPKICONTENT    <- { ANY }*
ISSUERUNIQUEID <- CTXSPCLASS BERLENGTH <<ruint32:$_:ISSUERUIDCONTENT>>
ISSUERUIDCONTENT <- { ANY }*

ANY            <- GENERICLIST / OID / INTEGER / IPV4 / NULL /
                  BSTRING / PSTRING / ISTRING / USTRING / OSTRING /
                  GENERICSET / GCTXSPCLASS / TIMESTAMP /
                  BOOLEAN

GENERICLIST    <- SEQUENCE BERLENGTH <<ruint32:$_:LISTCONTENT>>
GENERICSET     <- SET BERLENGTH <<ruint32:$_:LISTCONTENT>>
GCTXSPCLASS    <- CTXSPCLASS BERLENGTH <<ruint32:$_:LISTCONTENT>>
LISTCONTENT    <- { ANY }*

SEQUENCE       <- 0x30
SET            <- 0x31
CTXSPCLASS     <- 0xa3 / 0xa0
INTEGER        <- INTEGERTYPE BERLENGTH <<ruint32:$_:INTEGERVALUE>>
INTEGERTYPE    <- 0x02
INTEGERVALUE   <- { .* }
IPV4           <- 0x40 0x04 { .... }
NULL           <- 0x05 0x00
BITSTRING      <- 0x03
TIMESTAMP      <- 0x17 BERLENGTH <<ruint32:$_:TIMECONTENT>>
TIMECONTENT    <- { .* }
BOOLEAN        <- 0x01 0x01 { . }

PRINTABLESTRING <- 0x13
IASTRING        <- 0x16
UTF8STRING      <- 0x0c
OCTETSTRING     <- 0x04

BSTRING         <- BITSTRING BERLENGTH <<ruint32:$_:BSTRINGCNT>>
PSTRING         <- PRINTABLESTRING BERLENGTH <<ruint32:$_:STRINGCNT>>
ISTRING         <- IASTRING BERLENGTH <<ruint32:$_:STRINGCNT>>
USTRING         <- UTF8STRING BERLENGTH <<ruint32:$_:STRINGCNT>>
OSTRING         <- OCTETSTRING BERLENGTH <<ruint32:$_:STRINGCNT>>
STRINGCNT       <- { .* }
BSTRINGCNT      <- . { .* }

OID            <- 0x06 BERLENGTH <<ruint32:$_:OIDVALUE>>
OIDVALUE       <- { { . } { |80|80|* |00|80| }* }
    ".to_string();
    let input : [ u8; 784 ] = [
0x30, 0x82, 0x03, 0x0c, 0x30, 0x82, 0x02, 0x75, 
0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x2a, 
0x7e, 0xce, 0x09, 0xaf, 0x36, 0x36, 0x78, 0xe3, 
0xd1, 0xfa, 0x78, 0x89, 0xa8, 0x7c, 0xcc, 0x7b, 
0x71, 0xc6, 0x98, 0x30, 0x0d, 0x06, 0x09, 0x2a, 
0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 
0x05, 0x00, 0x30, 0x81, 0x97, 0x31, 0x0b, 0x30, 
0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 
0x4e, 0x4c, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 
0x55, 0x04, 0x08, 0x0c, 0x02, 0x55, 0x54, 0x31, 
0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x07, 
0x0c, 0x07, 0x4c, 0x65, 0x65, 0x72, 0x64, 0x61, 
0x6d, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 
0x04, 0x0a, 0x0c, 0x05, 0x4d, 0x79, 0x6f, 0x72, 
0x67, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 
0x04, 0x0b, 0x0c, 0x0a, 0x54, 0x68, 0x65, 0x73, 
0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x19, 
0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 
0x10, 0x4b, 0x65, 0x65, 0x73, 0x2d, 0x4a, 0x61, 
0x6e, 0x20, 0x48, 0x65, 0x72, 0x6d, 0x61, 0x6e, 
0x73, 0x31, 0x29, 0x30, 0x27, 0x06, 0x09, 0x2a, 
0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 
0x16, 0x1a, 0x6b, 0x65, 0x65, 0x73, 0x2e, 0x6a, 
0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x6d, 0x61, 
0x6e, 0x73, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 
0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0x0d, 
0x32, 0x31, 0x30, 0x39, 0x30, 0x35, 0x30, 0x39, 
0x30, 0x32, 0x30, 0x31, 0x5a, 0x17, 0x0d, 0x32, 
0x36, 0x30, 0x39, 0x30, 0x34, 0x30, 0x39, 0x30, 
0x32, 0x30, 0x31, 0x5a, 0x30, 0x81, 0x97, 0x31, 
0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 
0x13, 0x02, 0x4e, 0x4c, 0x31, 0x0b, 0x30, 0x09, 
0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x55, 
0x54, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 
0x04, 0x07, 0x0c, 0x07, 0x4c, 0x65, 0x65, 0x72, 
0x64, 0x61, 0x6d, 0x31, 0x0e, 0x30, 0x0c, 0x06, 
0x03, 0x55, 0x04, 0x0a, 0x0c, 0x05, 0x4d, 0x79, 
0x6f, 0x72, 0x67, 0x31, 0x13, 0x30, 0x11, 0x06, 
0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0a, 0x54, 0x68, 
0x65, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 
0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 
0x03, 0x0c, 0x10, 0x4b, 0x65, 0x65, 0x73, 0x2d, 
0x4a, 0x61, 0x6e, 0x20, 0x48, 0x65, 0x72, 0x6d, 
0x61, 0x6e, 0x73, 0x31, 0x29, 0x30, 0x27, 0x06, 
0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 
0x09, 0x01, 0x16, 0x1a, 0x6b, 0x65, 0x65, 0x73, 
0x2e, 0x6a, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 
0x6d, 0x61, 0x6e, 0x73, 0x40, 0x67, 0x6d, 0x61, 
0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x81, 
0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 
0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 
0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 
0x81, 0x81, 0x00, 0xb6, 0xf3, 0x17, 0xe5, 0x78, 
0x43, 0x93, 0x23, 0x78, 0x2b, 0x1e, 0x27, 0x72, 
0x26, 0x6d, 0x74, 0xe7, 0x83, 0x9a, 0xf1, 0xf3, 
0x42, 0x3f, 0xa1, 0x67, 0x84, 0x21, 0xd5, 0x4e, 
0x7f, 0x99, 0xed, 0xf4, 0x12, 0x68, 0x3d, 0x8a, 
0x00, 0x98, 0xfb, 0xc3, 0xa8, 0x46, 0x22, 0xc1, 
0x4d, 0xf4, 0x5d, 0x29, 0x3f, 0x10, 0x10, 0x59, 
0xfd, 0xea, 0xc1, 0x07, 0xd6, 0x8f, 0x31, 0xce, 
0x1e, 0x71, 0xdf, 0x80, 0x99, 0x50, 0xda, 0xd1, 
0x5d, 0xa9, 0x33, 0x6b, 0x4d, 0x93, 0x3e, 0x8c, 
0xab, 0x44, 0x68, 0x34, 0x28, 0x9d, 0x23, 0x4a, 
0x7c, 0x6e, 0xf7, 0xa8, 0x8a, 0x23, 0x8b, 0x40, 
0x6b, 0x83, 0x1a, 0xe2, 0xbe, 0x4a, 0xd5, 0x89, 
0xd7, 0x7c, 0xfe, 0x12, 0x39, 0x58, 0xb2, 0xfe, 
0x35, 0x9e, 0x77, 0x86, 0xab, 0xf3, 0xae, 0xf2, 
0x5f, 0x53, 0x17, 0x0c, 0x22, 0x4e, 0x3d, 0x3d, 
0x77, 0x8b, 0x7f, 0x02, 0x03, 0x01, 0x00, 0x01, 
0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 
0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x10, 
0x54, 0x3d, 0x84, 0x75, 0xfb, 0x40, 0x6c, 0xa9, 
0xf9, 0xac, 0xcb, 0xbd, 0x77, 0xe9, 0xa9, 0xcf, 
0xfd, 0x3c, 0x7e, 0x30, 0x1f, 0x06, 0x03, 0x55, 
0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 
0x10, 0x54, 0x3d, 0x84, 0x75, 0xfb, 0x40, 0x6c, 
0xa9, 0xf9, 0xac, 0xcb, 0xbd, 0x77, 0xe9, 0xa9, 
0xcf, 0xfd, 0x3c, 0x7e, 0x30, 0x0f, 0x06, 0x03, 
0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 
0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 
0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 
0x01, 0x0b, 0x05, 0x00, 0x03, 0x81, 0x81, 0x00, 
0x45, 0x83, 0xdb, 0x1f, 0x6f, 0xa3, 0xce, 0x5b, 
0xe7, 0x9c, 0x40, 0x41, 0x3b, 0x26, 0x85, 0x31, 
0xe2, 0x78, 0xdc, 0x85, 0xa8, 0x49, 0x7f, 0xee, 
0x68, 0x7d, 0x11, 0xc7, 0x42, 0xeb, 0x22, 0x23, 
0x3d, 0xff, 0x3a, 0x66, 0xf7, 0x95, 0xc1, 0xc9, 
0x52, 0xc3, 0x95, 0x6b, 0x55, 0x73, 0x6c, 0x5c, 
0x0a, 0xc9, 0x83, 0x79, 0x89, 0x34, 0x3f, 0x0e, 
0x86, 0xbc, 0x14, 0x38, 0x52, 0xb9, 0xe9, 0x7e, 
0xb6, 0xb3, 0xe0, 0xdc, 0x70, 0x12, 0x82, 0xfa, 
0x87, 0xce, 0x38, 0x29, 0x40, 0xa2, 0xfb, 0x21, 
0xa5, 0x10, 0x75, 0x8a, 0xa1, 0x6d, 0x67, 0x08, 
0xda, 0xda, 0xea, 0x5f, 0x83, 0xa7, 0x37, 0x29, 
0x7b, 0x9b, 0x51, 0xbe, 0x3c, 0x68, 0x2f, 0xae, 
0x32, 0x77, 0x66, 0x67, 0x65, 0x30, 0xf6, 0x36, 
0x29, 0x49, 0xa0, 0x3b, 0x78, 0x9a, 0x69, 0x7d, 
0x49, 0x35, 0x18, 0x7d, 0xe8, 0xdf, 0x3b, 0x6e, 
    ];
    assert!(!crate::naigama::naig_execute(& grammar, & input.to_vec()).is_err(), "CRT parser error.")
  }
}
