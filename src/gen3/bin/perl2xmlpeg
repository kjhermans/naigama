#!/usr/bin/perl

#use strict;
use Data::Dumper;

my $file = shift @ARGV;
my $perl = `cat $file`;
my $hash = eval $perl;

## Structure:
## {
##   objects => {
##     foo => 'foobar',
##     bar => 'barfu',
##   },
##   types => {
##     foobar => {
##       simple => undef,
##       textcontent => undef,
##       attrs => { 'oi' => 'String', 'yo' => 'Date' },
##       members => {
##         oui => barfu,
##         yes => stringy
##       }
##     },
##     barfu => {
##       simple => 1,
##       attrs => { 'gonow' => 'String' },
##     },
##     stringy => {
##       textcontent => 1,
##     },
##   }
## }

$hash->{types}{boolean} = {
  textcontent => 1,
  enum => 1,
  enumvalues => [ 'true', 'false' ]
};
$hash->{types}{float} = {
  textcontent => 1,
};
$hash->{types}{string} = {
  textcontent => 1,
};
$hash->{types}{int} = {
  textcontent => 1,
};
$hash->{types}{anyType} = {
  
};

my $sanitized = {};
my $sanitized_reversed = {};
my $x = 0;

output("TOP <- ");

die "No objects" if (!scalar(keys(%{$hash->{objects}})));

my $s = '';
foreach my $objname (sort keys(%{$hash->{objects}})) {
  $s .= "TOP_" . $objname . " / ";
}
$s =~ s/\/\s+$//;
output($s . "\n");

output("S <- %s*\n");
output("ATTR_OTHER <- S { [a-zA-Z0-9:_]+ } S '=' S '\"' { [^\"]* } '\"'\n");
output("CONTENT_OTHER <- { ( !'<' . )* }\n");

print "
-- Naigama specific grammar for 'any' XML
ANYXML      <- complexitem* / text
item        <- S complexitem / S simpleitem
simpleitem  <- S '<' { W } optattrs S '/>'
complexitem <- S '<' {:tag: W } optattrs S '>'
                 complexbody S
                 '</' \$tag '>'
complexbody <- S (item / { (!(S '<') .)+ })*
optattrs    <- S ( { attrname1 / attrname2 } EQUALS attrvalue )*
attrname1   <- S {:nbrace: ['\"] } { W } \$nbrace
attrname2   <- S { W }
attrvalue   <- S {:vbrace: ['\"] } { ( ! \$vbrace . )* } \$vbrace
text        <- S { ( !'<' . )* }
EQUALS      <- S '='
W           <- S [a-zA-Z0-9:_-]+
-- /End 'any' XML grammar

";

foreach my $objname (sort keys(%{$hash->{objects}})) {
  output("TOP_" . $objname . " <- S '<$objname");
  print_element($objname, $hash->{objects}{$objname});
}

#sanitize_hash($hash);

foreach my $typename (sort keys(%{$hash->{types}})) {
  output("-- Type $typename\n");
  my $type = $hash->{types}{$typename};
  if (scalar(keys(%{$type->{attrs}}))) {
    output('ATTRS_' . sanitized($typename) . ' <- (');
    my $s = '';
    foreach my $attr (sort keys(%{$type->{attrs}})) {
      $s .= 'ATTR_' . sanitized($typename, $attr) . ' / ';
    }
    $s .= "ATTR_OTHER )*\n";
    output($s);
    foreach my $attr (sort keys(%{$type->{attrs}})) {
      print
        'ATTR_' . sanitized($typename, $attr) . 
        " <- S '$attr' S '=' S '\"' { ( !'\"' .)* } '\"'\n";
    }
  } else {
    output('ATTRS_' . sanitized($typename) . " <- ( ATTR_OTHER )*\n");
  }
  if (scalar(@{$type->{enum}})) {
    output('ENUM_' . sanitized($typename) . ' <- S { ');
    my $s = '';
    foreach my $enumelt (reverse(sort(@{$type->{enum}}))) {
      $s .= "'$enumelt' / ";
    }
    $s =~ s/ \/ $//;
    $s .= "} / CONTENT_OTHER\n";
    output($s);
  }
  if (scalar(keys(%{$type->{members}}))) {
    output('MEMBERS_' . sanitized($typename) . ' <- (');
    my $s = '';
    foreach my $membername (sort keys(%{$type->{members}})) {
      $s .= 'MEMBER_' . sanitized($typename, $membername ) . ' / ';
    }
    $s =~ s/ \/ $//;
    output($s . " )*\n");
    foreach my $membername (sort keys(%{$type->{members}})) {
      my $membertypename = $type->{members}{$membername};
      output(
        'MEMBER_' . sanitized($typename, $membername) .
        " <- S '<$membername"
      );
      print_element($membername, $membertypename);
    }
  }
  output("\n");
}

sub print_element
{
  my ($name, $typename) = @_;
  if ($typename eq 'anyType') {
    output("' ATTRS_anyType '>' S ANYXML S '</$name>'\n");
    return;
  }
  my $type = $hash->{types}{$typename} || die "Type '$typename' not found";
  output("' ATTRS_" . sanitized($typename) . ' S');
  output(" ( '/>' / '>' ");
  if (!scalar(keys(%{$type->{members}}))) {
    if (scalar(@{$type->{enum}})) {
      output(' ENUM_' . sanitized($typename));
    } else {
      output(" { ( !'<' . )* }");
    }
    output(" '</$name>' )\n");
  } else {
    output(' MEMBERS_' . sanitized($typename) . " S '</$name>' )\n");
  }
}

sub sanitized
{
  my $key = join('//', @_);
  if (defined($sanitized->{$key})) {
    return $sanitized->{$key};
  }
  my @result;
  my $length = 0;
  while (my $param = shift @_) {
    my $str = "$param";
    $str =~ s/[^a-zA-Z0-9]//;
    push @result, $str;
    $length += (length($str) + 1);
  }
  if ($length > 48) {
#    my $allowed = 54 / scalar(@result);
#    for (my $i=0; $i < scalar(@result); $i++) {
#      my $str = $result[$i];
#      $str = substr($str, 0, $allowed);
#      splice(@result, $i, 1, $str);
#    }
    my $cookie = join('',
      ('a'..'z', 'A'..'Z')[
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
        rand 52, rand 52,
      ]
    );
    @result = ( $cookie );
  }
  my $result = join('_', @result);
  while (defined($sanitized_reversed->{$result})) {
    $result .= '_x';
  }
  $sanitized->{$key} = $result;
  $sanitized_reversed->{$result} = $key;
  return $result;
}

sub output
{
  my $str = shift;
print $str; return;
#  if ($x > 80) {
#    print "\n    ";
#    $x = 4;
#  }
#  while (length($str) > 80) {
#    if ($str =~ s/^(.{60}.*?)\s//) {
#      print $1 . "\n    ";
#    } else {
#      last;
#    }
#  }
#  print $str;
#  if ($str =~ /\n$/) {
#    $x = 0;
#  } else {
#    $x += length($str);
#  }
}

1;
