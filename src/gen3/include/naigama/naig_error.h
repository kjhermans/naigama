/** AUTOGENERATED **/

#ifndef _NAIG_ERROR_H_
#define _NAIG_ERROR_H_
#define NAIG_ERRCODE_ACTIONFULL -22
#define NAIG_ERRCODE_ACTIONLIST -23
#define NAIG_ERRCODE_ASSEMBLYPARSER 515
#define NAIG_ERRCODE_ASSEMBLYTOKENS 516
#define NAIG_ERRCODE_BADOPCODE -20
#define NAIG_ERRCODE_BITFAULT -28
#define NAIG_ERRCODE_CALL 266
#define NAIG_ERRCODE_CHECKSUM -6
#define NAIG_ERRCODE_CODEOVERFLOW -21
#define NAIG_ERRCODE_COMPILER 257
#define NAIG_ERRCODE_DOUBLEMAIN 267
#define NAIG_ERRCODE_ENDLESSLOOP -30
#define NAIG_ERRCODE_ENGINE -1027
#define NAIG_ERRCODE_ESCAPE 270
#define NAIG_ERRCODE_IMPORT 268
#define NAIG_ERRCODE_IMPORTRECURSION 269
#define NAIG_ERRCODE_INTOVERFLOW -1025
#define NAIG_ERRCODE_INTRPCAPTURE -1028
#define NAIG_ERRCODE_LABEL 513
#define NAIG_ERRCODE_LABELMAP -25
#define NAIG_ERRCODE_MACRO 260
#define NAIG_ERRCODE_MAXINSTR -32
#define NAIG_ERRCODE_MAXSTACK -31
#define NAIG_ERRCODE_MEMORY -7
#define NAIG_ERRCODE_NAMESPACE 264
#define NAIG_ERRCODE_NOTFOUND -4
#define NAIG_ERRCODE_OPCODE 514
#define NAIG_ERRCODE_OPERANDTYPE -1024
#define NAIG_ERRCODE_OVERFLOW -5
#define NAIG_ERRCODE_QUANTIFIER 259
#define NAIG_ERRCODE_READ -1
#define NAIG_ERRCODE_REGFULL -26
#define NAIG_ERRCODE_REGNOTFOUND -27
#define NAIG_ERRCODE_SCALARTYPE -1026
#define NAIG_ERRCODE_SERVICELOOP -2049
#define NAIG_ERRCODE_SLOTMAPFULL 263
#define NAIG_ERRCODE_STACKCORRUPT -19
#define NAIG_ERRCODE_STACKEMPTY -18
#define NAIG_ERRCODE_STACKFULL -17
#define NAIG_ERRCODE_TOKEN 258
#define NAIG_ERRCODE_TRAP -29
#define NAIG_ERRCODE_TYPE 265
#define NAIG_ERRCODE_UNIMPL -3
#define NAIG_ERRCODE_VARDOUBLE 262
#define NAIG_ERRCODE_VARIABLE -24
#define NAIG_ERRCODE_VARMAPFULL 261
#define NAIG_ERRCODE_WRITE -2

#define NAIG_ERR_ACTIONFULL (NAIG_ERR_T){ .code = NAIG_ERRCODE_ACTIONFULL } 
#define NAIG_ERR_ACTIONLIST (NAIG_ERR_T){ .code = NAIG_ERRCODE_ACTIONLIST } 
#define NAIG_ERR_ASSEMBLYPARSER (NAIG_ERR_T){ .code = NAIG_ERRCODE_ASSEMBLYPARSER } 
#define NAIG_ERR_ASSEMBLYTOKENS (NAIG_ERR_T){ .code = NAIG_ERRCODE_ASSEMBLYTOKENS } 
#define NAIG_ERR_BADOPCODE (NAIG_ERR_T){ .code = NAIG_ERRCODE_BADOPCODE } 
#define NAIG_ERR_BITFAULT (NAIG_ERR_T){ .code = NAIG_ERRCODE_BITFAULT } 
#define NAIG_ERR_CALL (NAIG_ERR_T){ .code = NAIG_ERRCODE_CALL } 
#define NAIG_ERR_CHECKSUM (NAIG_ERR_T){ .code = NAIG_ERRCODE_CHECKSUM } 
#define NAIG_ERR_CODEOVERFLOW (NAIG_ERR_T){ .code = NAIG_ERRCODE_CODEOVERFLOW } 
#define NAIG_ERR_COMPILER (NAIG_ERR_T){ .code = NAIG_ERRCODE_COMPILER } 
#define NAIG_ERR_DOUBLEMAIN (NAIG_ERR_T){ .code = NAIG_ERRCODE_DOUBLEMAIN } 
#define NAIG_ERR_ENDLESSLOOP (NAIG_ERR_T){ .code = NAIG_ERRCODE_ENDLESSLOOP } 
#define NAIG_ERR_ENGINE (NAIG_ERR_T){ .code = NAIG_ERRCODE_ENGINE } 
#define NAIG_ERR_ESCAPE (NAIG_ERR_T){ .code = NAIG_ERRCODE_ESCAPE } 
#define NAIG_ERR_IMPORT (NAIG_ERR_T){ .code = NAIG_ERRCODE_IMPORT } 
#define NAIG_ERR_IMPORTRECURSION (NAIG_ERR_T){ .code = NAIG_ERRCODE_IMPORTRECURSION } 
#define NAIG_ERR_INTOVERFLOW (NAIG_ERR_T){ .code = NAIG_ERRCODE_INTOVERFLOW } 
#define NAIG_ERR_INTRPCAPTURE (NAIG_ERR_T){ .code = NAIG_ERRCODE_INTRPCAPTURE } 
#define NAIG_ERR_LABEL (NAIG_ERR_T){ .code = NAIG_ERRCODE_LABEL } 
#define NAIG_ERR_LABELMAP (NAIG_ERR_T){ .code = NAIG_ERRCODE_LABELMAP } 
#define NAIG_ERR_MACRO (NAIG_ERR_T){ .code = NAIG_ERRCODE_MACRO } 
#define NAIG_ERR_MAXINSTR (NAIG_ERR_T){ .code = NAIG_ERRCODE_MAXINSTR } 
#define NAIG_ERR_MAXSTACK (NAIG_ERR_T){ .code = NAIG_ERRCODE_MAXSTACK } 
#define NAIG_ERR_MEMORY (NAIG_ERR_T){ .code = NAIG_ERRCODE_MEMORY } 
#define NAIG_ERR_NAMESPACE (NAIG_ERR_T){ .code = NAIG_ERRCODE_NAMESPACE } 
#define NAIG_ERR_NOTFOUND (NAIG_ERR_T){ .code = NAIG_ERRCODE_NOTFOUND } 
#define NAIG_ERR_OPCODE (NAIG_ERR_T){ .code = NAIG_ERRCODE_OPCODE } 
#define NAIG_ERR_OPERANDTYPE (NAIG_ERR_T){ .code = NAIG_ERRCODE_OPERANDTYPE } 
#define NAIG_ERR_OVERFLOW (NAIG_ERR_T){ .code = NAIG_ERRCODE_OVERFLOW } 
#define NAIG_ERR_QUANTIFIER (NAIG_ERR_T){ .code = NAIG_ERRCODE_QUANTIFIER } 
#define NAIG_ERR_READ (NAIG_ERR_T){ .code = NAIG_ERRCODE_READ } 
#define NAIG_ERR_REGFULL (NAIG_ERR_T){ .code = NAIG_ERRCODE_REGFULL } 
#define NAIG_ERR_REGNOTFOUND (NAIG_ERR_T){ .code = NAIG_ERRCODE_REGNOTFOUND } 
#define NAIG_ERR_SCALARTYPE (NAIG_ERR_T){ .code = NAIG_ERRCODE_SCALARTYPE } 
#define NAIG_ERR_SERVICELOOP (NAIG_ERR_T){ .code = NAIG_ERRCODE_SERVICELOOP } 
#define NAIG_ERR_SLOTMAPFULL (NAIG_ERR_T){ .code = NAIG_ERRCODE_SLOTMAPFULL } 
#define NAIG_ERR_STACKCORRUPT (NAIG_ERR_T){ .code = NAIG_ERRCODE_STACKCORRUPT } 
#define NAIG_ERR_STACKEMPTY (NAIG_ERR_T){ .code = NAIG_ERRCODE_STACKEMPTY } 
#define NAIG_ERR_STACKFULL (NAIG_ERR_T){ .code = NAIG_ERRCODE_STACKFULL } 
#define NAIG_ERR_TOKEN (NAIG_ERR_T){ .code = NAIG_ERRCODE_TOKEN } 
#define NAIG_ERR_TRAP (NAIG_ERR_T){ .code = NAIG_ERRCODE_TRAP } 
#define NAIG_ERR_TYPE (NAIG_ERR_T){ .code = NAIG_ERRCODE_TYPE } 
#define NAIG_ERR_UNIMPL (NAIG_ERR_T){ .code = NAIG_ERRCODE_UNIMPL } 
#define NAIG_ERR_VARDOUBLE (NAIG_ERR_T){ .code = NAIG_ERRCODE_VARDOUBLE } 
#define NAIG_ERR_VARIABLE (NAIG_ERR_T){ .code = NAIG_ERRCODE_VARIABLE } 
#define NAIG_ERR_VARMAPFULL (NAIG_ERR_T){ .code = NAIG_ERRCODE_VARMAPFULL } 
#define NAIG_ERR_WRITE (NAIG_ERR_T){ .code = NAIG_ERRCODE_WRITE } 

#define NAIG_ERR_SWITCH \
  case -22: return "ACTIONFULL";\
  case -23: return "ACTIONLIST";\
  case 515: return "ASSEMBLYPARSER";\
  case 516: return "ASSEMBLYTOKENS";\
  case -20: return "BADOPCODE";\
  case -28: return "BITFAULT";\
  case 266: return "CALL";\
  case -6: return "CHECKSUM";\
  case -21: return "CODEOVERFLOW";\
  case 257: return "COMPILER";\
  case 267: return "DOUBLEMAIN";\
  case -30: return "ENDLESSLOOP";\
  case -1027: return "ENGINE";\
  case 270: return "ESCAPE";\
  case 268: return "IMPORT";\
  case 269: return "IMPORTRECURSION";\
  case -1025: return "INTOVERFLOW";\
  case -1028: return "INTRPCAPTURE";\
  case 513: return "LABEL";\
  case -25: return "LABELMAP";\
  case 260: return "MACRO";\
  case -32: return "MAXINSTR";\
  case -31: return "MAXSTACK";\
  case -7: return "MEMORY";\
  case 264: return "NAMESPACE";\
  case -4: return "NOTFOUND";\
  case 514: return "OPCODE";\
  case -1024: return "OPERANDTYPE";\
  case -5: return "OVERFLOW";\
  case 259: return "QUANTIFIER";\
  case -1: return "READ";\
  case -26: return "REGFULL";\
  case -27: return "REGNOTFOUND";\
  case -1026: return "SCALARTYPE";\
  case -2049: return "SERVICELOOP";\
  case 263: return "SLOTMAPFULL";\
  case -19: return "STACKCORRUPT";\
  case -18: return "STACKEMPTY";\
  case -17: return "STACKFULL";\
  case 258: return "TOKEN";\
  case -29: return "TRAP";\
  case 265: return "TYPE";\
  case -3: return "UNIMPL";\
  case 262: return "VARDOUBLE";\
  case -24: return "VARIABLE";\
  case 261: return "VARMAPFULL";\
  case -2: return "WRITE";\
  default: return "Unknown error";

#define NAIG_ERR_EXPLICIT_SWITCH \
  case -22: return "Action list about to exceed its maximum size";\
  case -23: return "(No explicit message given)";\
  case 515: return "Assembly parser";\
  case 516: return "Assembly tokens";\
  case -20: return "Unknown opcode";\
  case -28: return "Bit fault detected";\
  case 266: return "(No explicit message given)";\
  case -6: return "(No explicit message given)";\
  case -21: return "Jump offset exceeds bytecode length";\
  case 257: return "(No explicit message given)";\
  case 267: return "More than one main symbol defined";\
  case -30: return "Endless loop detected";\
  case -1027: return "General engine error";\
  case 270: return "String escaping";\
  case 268: return "Import not found";\
  case 269: return "Too many levels of import recursion";\
  case -1025: return "(No explicit message given)";\
  case -1028: return "Interpret capture error";\
  case 513: return "Label error";\
  case -25: return "(No explicit message given)";\
  case 260: return "Unknown macro specifier";\
  case -32: return "(No explicit message given)";\
  case -31: return "(No explicit message given)";\
  case -7: return "(No explicit message given)";\
  case 264: return "(No explicit message given)";\
  case -4: return "(No explicit message given)";\
  case 514: return "Unknown opcode";\
  case -1024: return "(No explicit message given)";\
  case -5: return "(No explicit message given)";\
  case 259: return "Non sensical range given in quantifier";\
  case -1: return "(No explicit message given)";\
  case -26: return "Registry about to exceed its maximum size";\
  case -27: return "Registry entry not found";\
  case -1026: return "Unknown scalar type encountered";\
  case -2049: return "Service loop abnormal end";\
  case 263: return "(No explicit message given)";\
  case -19: return "Corruption detected on stack";\
  case -18: return "Stack pop on empty stack";\
  case -17: return "Stack about to exceed its maximum size";\
  case 258: return "(No explicit message given)";\
  case -29: return "(No explicit message given)";\
  case 265: return "(No explicit message given)";\
  case -3: return "(No explicit message given)";\
  case 262: return "(No explicit message given)";\
  case -24: return "(No explicit message given)";\
  case 261: return "(No explicit message given)";\
  case -2: return "(No explicit message given)";\
  default: return "Unknown error";

#endif
