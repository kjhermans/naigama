-- Naigama Grammar Grammar

GRAMMAR            <- ( DEFINITION+ / SINGLE_EXPRESSION ) END

S                  <- %s+

COMMENT            <- '--' [^\n]* '\n'

__prefix           <- ( COMMENT / S )*

END                <- !.

DEFINITION         <- FUNCDECL / RULE

SINGLE_EXPRESSION  <- EXPRESSION

RULE               <- { IDENT } LEFTARROW EXPRESSION SEMICOLON

EXPRESSION         <- { TERMS } OR NOTHING /
                      { TERMS } OR EXPRESSION /
                      { TERMS }

TERMS              <- { TERM }+

TERM               <- { ENDOWEDMATCHER }

ENDOWEDMATCHER     <- { NOT / AND }? MATCHER { QUANTIFIER }?

QUANTIFIER         <- '?' /
                      '+' /
                      '*' /
                      '^' { [0-9]+ } '-' { [0-9]+ } /
                      '^' '-' { [0-9]+ } /
                      '^' { [0-9]+ } '-' /
                      '^' { [0-9]+ } /
                      '^$' { IDENT }

MATCHER            <- { ANY } /
                      { SET } /
                      { STRING } /
                      { BITMASK } /
                      { HEXLITERAL } /
                      { VARCAPTURE } /
                      { CAPTURE } /
                      { GROUP } /
                      { MACRO } /
                      { ENDFORCE } /
                      { VARREFERENCE } /
                      { REFERENCE }

BITMASK            <- '|' [0-9a-fA-F]^2 '|' [0-9a-fA-F]^2 '|'

VARCAPTURE         <- CBOPEN COLON { IDENT } { CAPTURETYPE }? COLON
                      EXPRESSION { CBCLOSE } CAPTUREEND

CAPTURETYPE        <- SEMICOLON TYPE

TYPE               <- { 'uint32' / 'int32' }

CAPTURE            <- CBOPEN EXPRESSION { CBCLOSE } CAPTUREEND

GROUP              <- BOPEN EXPRESSION { BCLOSE }

CAPTUREEND         <- ( REPLACE / RECYCLE )?

SET                <- ABOPEN { SETNOT? } (
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] } '-' 
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] }
                        /
                        { '\\' ([nrtv\\\]\-] / [0-9]^3) / [^\\\]] }
                      )+ { ABCLOSE }

VARREFERENCE       <- '$' ( { IDENT } / { NUMBER } )

REFERENCE          <- IDENT !( LEFTARROW )

REPLACE            <- RIGHTARROW { REPLACETERMS }

REPLACETERMS       <- REPLACETERM+

REPLACETERM        <- { STRINGLITERAL } / { HEXLITERAL } / { VARREFERENCE }

RECYCLE            <- FATARROW { IDENT }

LEFTARROW          <- '<-'
RIGHTARROW         <- '->'
FATARROW           <- '=>'
NOT                <- '!'
AND                <- '&'
MACRO              <- '%' [a-zA-Z] [a-zA-Z0-9]*
ENDFORCE           <- '__end' S { NUMBER }
HEXLITERAL         <- '0x' [0-9a-fA-F]^2
NUMBER             <- [0-9]+
STRING             <- STRINGLITERAL 'i'?
OR                 <- '/'
ANY                <- '.'
NOTHING            <- '...'
SETNOT             <- '^'

-- scripting engine

FUNCDECL       <- KW_FUNCTION S { IDENT } { FUNCPARAMDECL } { FUNCBODY }

FUNCPARAMDECL  <- BOPEN ( { PARAMDECL } ( COMMA { PARAMDECL } )* )? BCLOSE

PARAMDECL      <- { IDENT } { IDENT } / { IDENT }

FUNCBODY       <- CBOPEN { LOWSTMT }* CBCLOSE

LOWSTMT        <- { ST_IF } /
                  { ST_WHILE } /
                  { ST_RETURN } /
                  { ST_OTHER } /
                  { VARDECL } /
                  { ASSIGNMENT } /
                  ( SCR_EXPRESSION )? SEMICOLON

ST_IF          <- KW_IF BOPEN { SCR_EXPRESSION } BCLOSE
                    CBOPEN { LOWSTMT* } CBCLOSE
                    { IF_ELSEIF* }
                    { IF_ELSE? }

IF_ELSEIF      <- KW_ELSEIF BOPEN { SCR_EXPRESSION } BCLOSE
                    CBOPEN { LOWSTMT* } CBCLOSE 

IF_ELSE        <- KW_ELSE CBOPEN { LOWSTMT* } CBCLOSE

ST_WHILE       <- KW_WHILE BOPEN { SCR_EXPRESSION } BCLOSE
                    CBOPEN { LOWSTMT* } CBCLOSE

ST_RETURN      <- KW_RETURN { SCR_EXPRESSION? } SEMICOLON

ST_OTHER       <- ( KW_BREAK / KW_CONTINUE ) SEMICOLON

VARDECL        <- KW_VAR S IDENT ( ASSIGN { SCR_EXPRESSION } )? SEMICOLON

ASSIGNMENT     <- IDENT ASSIGNS SCR_EXPRESSION SEMICOLON

ASSIGNS        <- { ASSIGN / PLUSIS / MINIS / MULIS / DIVIS /
                    BITANDIS / BITORIS / BITXORIS / BITNOTIS /
                    LSHIFTIS / RSHIFTIS }

-- Operator precedence from https://en.cppreference.com/w/c/language/operator_precedence

SCR_EXPRESSION <- BINOP_P12

BINOP_P12      <- ( BINOP_P11 / EXPATOM ) { { LOGOR }                 ( BINOP_P11 / EXPATOM ) }*
BINOP_P11      <- ( BINOP_P10 / EXPATOM ) { { LOGAND }                ( BINOP_P10 / EXPATOM ) }*
BINOP_P10      <- ( BINOP_P09 / EXPATOM ) { { BITOR }                 ( BINOP_P09 / EXPATOM ) }*
BINOP_P09      <- ( BINOP_P08 / EXPATOM ) { { BITXOR }                ( BINOP_P08 / EXPATOM ) }*
BINOP_P08      <- ( BINOP_P07 / EXPATOM ) { { BITAND }                ( BINOP_P07 / EXPATOM ) }*
BINOP_P07      <- ( BINOP_P06 / EXPATOM ) { { EQUALS / NEQUALS }      ( BINOP_P06 / EXPATOM ) }*
BINOP_P06      <- ( BINOP_P05 / EXPATOM ) { { LTEQ / LT / GTEQ / GT } ( BINOP_P05 / EXPATOM ) }*
BINOP_P05      <- ( BINOP_P04 / EXPATOM ) { { LSHIFT / RSHIFT }       ( BINOP_P04 / EXPATOM ) }*
BINOP_P04      <- ( BINOP_P03 / EXPATOM ) { { ADD / SUB }             ( BINOP_P03 / EXPATOM ) }*
BINOP_P03      <- (             EXPATOM ) { { MUL / DIV / POW }       (             EXPATOM ) }*

EXPATOM        <- { UNARY }* { SCR_TERM }

UNARY          <- { LOGNOT / BITNOT / INC / DEC }

SCR_TERM       <- { LITERAL } /
                  { FUNCTIONCALL } /
                  { SCR_REFERENCE } /
                  { BOPEN { SCR_EXPRESSION } BCLOSE }

FUNCTIONCALL   <- { SCR_REFERENCE }
                  BOPEN ( SCR_EXPRESSION ( COMMA SCR_EXPRESSION )* )? BCLOSE

SCR_REFERENCE  <- IDENT INDEX* ( DOT SCR_REFERENCE )*

INDEX          <- ABOPEN { SCR_EXPRESSION } ABCLOSE

LITERAL        <- STRINGLITERAL /
                  HASHLITERAL /
                  LISTLITERAL /
                  FLOATLITERAL /
                  INTLITERAL /
                  BOOLEANLITERAL

STRINGLITERAL  <- '\'' { ( '\\' ([nrtv\\'] / [0-9]^3) / [^'\\] )* } '\''
HASHLITERAL    <- { CBOPEN ( HASHELT ( COMMA HASHELT )* )? CBCLOSE }
HASHELT        <- { HASHKEY COLON HASHVALUE }
HASHKEY        <- { SCR_TERM }
HASHVALUE      <- { SCR_TERM }
LISTLITERAL    <- { ABOPEN ( LISTELT ( COMMA LISTELT )* )? ABCLOSE }
LISTELT        <- { SCR_TERM }
FLOATLITERAL   <- { [0-9]* '.' [0-9]+ }
INTLITERAL     <- { [0-9]+ }
BOOLEANLITERAL <- { 'true' / 'false' }

-- KW_IMPORT      <- 'import'
KW_FUNCTION    <- 'function'
KW_VAR         <- 'var'
KW_WHILE       <- 'while'
KW_RETURN      <- 'return'
KW_IF          <- 'if'
KW_ELSEIF      <- 'elseif'
KW_ELSE        <- 'else'
KW_BREAK       <- 'break'
KW_CONTINUE    <- 'continue'

IDENT          <- [a-zA-Z_][a-zA-Z0-9_]^0-63
BOPEN          <- '('
BCLOSE         <- ')'
CBOPEN         <- '{'
CBCLOSE        <- '}'
ABOPEN         <- '['
ABCLOSE        <- ']'
ASSIGN         <- { '=' }
PLUSIS         <- { '+=' }
MINIS          <- { '-=' }
MULIS          <- { '*=' }
DIVIS          <- { '/=' }
EQUALS         <- { '==' }
NEQUALS        <- { '!=' }
LT             <- { '<' } !'='
GT             <- { '>' } !'='
LTEQ           <- { '<=' }
GTEQ           <- { '>=' }
SEMICOLON      <- ';'
COLON          <- { ':' }
POW            <- { '**' }
MUL            <- { '*' } !'*'
DIV            <- { '/' } !'='
ADD            <- { '+' } ![+=]
SUB            <- { '-' } ![\-=]
INC            <- { '++' }
DEC            <- { '--' }
LOGAND         <- { '&&' }
LOGOR          <- { '||' }
LOGNOT         <- { '!' } !'='
BITAND         <- { '&' } ![&=]
BITOR          <- { '|' } ![|=]
BITXOR         <- { '^' } !'='
BITNOT         <- { '~' }
BITANDIS       <- { '&=' }
BITORIS        <- { '|=' }
BITXORIS       <- { '^=' }
BITNOTIS       <- { '~=' }
COMMA          <- ','
DOT            <- { '.' }
LSHIFT         <- { '<<' } !'='
RSHIFT         <- { '>>' } !'='
LSHIFTIS       <- { '<<=' }
RSHIFTIS       <- { '>>=' }
