#!/usr/bin/perl

use strict;
use Data::Dumper;

$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;

my $xsdpath = shift @ARGV;

my $debug = 1;

my @nsp = ( 'jdssdm' ); # must be a command line option to fill this list

my @includes;
my $counter = 0;
my $xsddir = $xsdpath; $xsddir =~ s/\/[^\/]+$//;
my $xsdhash = load_xml($xsdpath, $xsddir);
$xsdhash->{xml} =~ s/<annotation.*?<\/annotation>//sg;
push @includes, $xsdhash;
parse_xml($xsdhash);
parse_xsd($xsdhash);
parse_xsd_secondrun($xsdhash);

print Dumper { objects => $xsdhash->{objects}, types => $xsdhash->{types} };

exit 0;

sub load_xml
{
  my $path = shift;
  my $dir = shift;
  my $xml;
  if (-f $path) {
    $xml = `cat $path`;
  } elsif (-f "$dir/$path") {
    $xml = `cat $dir/$path`;
  } else {
    die "Could not load $path, not even at $dir";
  }
  $xml =~ s/<!--.*?-->//sg;
  $xml =~ s/<\?.*\?>//s;
  return {
    xml => $xml,
    stack => [],
    path => $path,
    dir => $dir
  };
}

sub parse_xml
{
  my $prs = shift;
  while (length($prs->{xml})) {
    $prs->{xml} =~ s/^\s+//;
    if ($prs->{xml} =~ s/^<([a-zA-Z0-9_:]+)\s*//) {
      my $tagname = $1;
      if ($debug) {
        print STDERR "OPENTAG '$tagname'\n";
      }
      my $tag = {
        name => $tagname
      };
      if (scalar(@{$prs->{stack}})) {
        push @{$prs->{stack}[-1]{children}}, $tag;
        $prs->{stack}[-1]{keys}{$tagname} = $tag;
      } else {
        $prs->{top} = $tag;
      }
      push @{$prs->{stack}}, $tag;
      while (length($prs->{xml})) {
        if ($prs->{xml} =~ s/^([a-zA-Z0-9_:]+)\s*=\s*"(.*?)"\s*//) {
          $tag->{attrs}{$1} = $2;
        } else {
          last;
        }
      }
      if ($prs->{xml} =~ s/^\/>\s*//) {
        $tag->{__type} = 'simple';
        pop @{$prs->{stack}};
      } elsif ($prs->{xml} =~ s/^>\s*//) {
        $tag->{__type} = 'complex';
        while (length($prs->{xml})) {
          if ($prs->{xml} =~ s/^<!\[CDATA\[(.*?)\]\]//s) {
            $tag->{text} .= $1;
          } elsif ($prs->{xml} =~ s/^([^<]+)//) {
            $tag->{text} .= $1;
          } else {
            last;
          }
        }
        if (length($tag->{text})) {
          if ($prs->{xml} =~ s/^<\/\s*$tagname\s*>//) {
            pop @{$prs->{stack}};
          } else {
            die "Tags with text fill should close at $prs->{xml}";
          }
        }
      } else {
        die "Unexpected token at $prs->{xml}";
      }
    } elsif ($prs->{xml} =~ s/^<\/([a-zA-Z0-9_:]+)\s*>\s*//) {
      my $tagname = $1;
      if ($debug) {
        print STDERR "CLOSETAG: '$tagname'\n";
      }
      if (scalar(@{$prs->{stack}}) && $prs->{stack}[-1]{name} eq $tagname) {
        pop @{$prs->{stack}};
      } else {
        die "Close tag; expected '$prs->{stack}[-1]{name}' at '$prs->{xml}'";
      }
    } else {
      die "Parse error at $prs->{xml}; expected tag";
    }
  }
}

sub reconstitute_xml
{
  my $hash = shift;
  my $indent = shift || 0;
  my $s = '';
  if ($hash->{name}) {
    $s .= '  ' x $indent;
    $s .= "<$hash->{name}";
    if (defined($hash->{attrs}) && scalar(keys(%{$hash->{attrs}}))) {
      foreach my $attr (keys(%{$hash->{attrs}})) {
        $s .= " $attr=\"$hash->{attrs}{$attr}\"";
      }
    }
    if (!defined($hash->{children}) && !length($hash->{text})) {
      $s .= "/>\n";
      return $s;
    } else {
      $s .= ">\n";
    }
  }
  if (length($hash->{text})) {
    $s .= $hash->{text} . "\n";
  } elsif (defined($hash->{children})) {
    foreach my $child (@{$hash->{children}}) {
      $s .= reconstitute_xml($child, $indent + 1);
    }
  }
  if ($hash->{name}) {
    $s .= '  ' x $indent . "</$hash->{name}>\n";
  }
  return $s;
}

sub parse_xsd
{
  my $prs = shift;
  parse_xsd_includes($prs);
  parse_xsd_top($prs);
}

sub parse_xsd_includes
{
  my $prs = shift;
  foreach my $child (@{$prs->{top}{children}}) {
    if ($child->{name} eq 'include' || $child->{name} eq 'import') {
      my $location = $child->{attrs}{schemaLocation};
      my $xsd = load_xml($location, $prs->{dir});
      $xsd->{xml} =~ s/<annotation.*?<\/annotation>//sg;
      parse_xml($xsd);
      push @includes, $xsd;
      print STDERR "Included $location\n";
      parse_xsd_includes($xsd);
    }
  }
}

sub parse_xsd_top
{
  my $prs = shift;
  foreach my $include (@includes) {
    foreach my $child (@{$include->{top}{children}}) {

      if ($child->{name} =~ /^(xsd:)?element$/) {
        my $objname = $child->{attrs}{name};
        my $objtype = $child->{attrs}{type};
        if ($objtype) {
          $objtype =~ s/^.*://;
          $prs->{objects}{$objname} = $objtype;
        } else {
          my $anontypename = "ANONTYPE_" . ++$counter;
          my $anontype = { __name => $anontypename };
          $prs->{objects}{$objname} = $anontypename;
          $prs->{types}{$anontypename} = $anontype;
          xsd_discover_type($prs, $child->{children}[0], $anontype);
        }

      } elsif ($child->{name} =~ /^(xsd:)?attribute$/) {

      } elsif ($child->{name} =~ /^(xsd:)?complexType$/) {
        my $typename = $child->{attrs}{name};
        $typename =~ s/^.*://;
        my $type = { __name => $typename };
        $prs->{types}{$typename} = $type;
        xsd_discover_type($prs, $child, $type);

      } elsif ($child->{name} =~ /^(xsd:)?simpleType$/) {
        my $typename = $child->{attrs}{name};
        $typename =~ s/^.*://;
        my $type = { simple => 1, __name => $typename };
        $prs->{types}{$typename} = $type;
        xsd_discover_type($prs, $child, $type);

      } elsif ($child->{name} !~ /^(include|import)$/) {
        die "Unknown element $child->{name}\n";
      }
    }
  }
}

sub xsd_discover_type
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)complexContent$/) {
      xsd_complexcontent($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)simpleContent$/) {
      xsd_simplecontent($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)sequence$/) {
      xsd_sequence($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)attribute$/) {
      xsd_attribute($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)choice$/) {
      xsd_choice($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)restriction$/) {
      xsd_restriction($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}

sub xsd_complexcontent
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)extension$/) {
      xsd_extension($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}

sub xsd_simplecontent
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)extension$/) {
      xsd_extension($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}


sub xsd_extension
{
  my ($prs, $node, $type) = @_;
  my $base = $node->{attrs}{base};
  if ($base) {
   $base =~ s/^.*://;
    $type->{extends} = $base;
  }
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)sequence$/) {
      xsd_sequence($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)choice$/) {
      xsd_choice($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)attribute$/) {
      xsd_attribute($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}


sub xsd_sequence
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)element$/) {
      xsd_element($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)choice$/) {
      xsd_choice($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)sequence$/) {
      xsd_sequence($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}

sub xsd_element
{
  my ($prs, $node, $type) = @_;
  my $membername = $node->{attrs}{name};
  my $membertype = $node->{attrs}{type};
  if (length($membertype)) {
    $membertype =~ s/^.*://;
    $type->{members}{$membername} = $membertype;
  } else {
    foreach my $child (@{$node->{children}}) {
      if ($child->{name} =~ /^(xsd:)simpleType$/) {
        my $subtypename = 'ANON_' . ++$counter;
        my $subtype = { __name => $subtypename, simple => 1 };
        $prs->{types}{$subtypename} = $subtype;
        xsd_discover_type($prs, $child, $subtype);
        $type->{members}{$membername} = $subtypename;
      } elsif ($child->{name} =~ /^(xsd:)complexType$/) {
        my $subtypename = 'ANON_' . ++$counter;
        my $subtype = { __name => $subtypename };
        $prs->{types}{$subtypename} = $subtype;
        xsd_discover_type($prs, $child, $subtype);
        $type->{members}{$membername} = $subtypename;
      } else {
        die "Unknown child $child->{name}";
      }
    }
  }
}

sub xsd_attribute
{
  my ($prs, $node, $type) = @_;
  my $attrname = $node->{attrs}{name};
  my $attrtype = $node->{attrs}{type};
  if (length($attrtype)) {
    $attrtype =~ s/^.*://;
    $type->{attrs}{$attrname} = $attrtype;
  } else {
    foreach my $child (@{$node->{children}}) {
      if ($child->{name} =~ /^(xsd:)simpleType$/) {
        print STDERR "Unhandled attr simpleType: " . reconstitute_xml($node);
        $type->{attrs}{$attrname} = "String";
      } else {
        die "Unknown child $child->{name}";
      }
    }
  }
}

sub xsd_choice
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)element$/) {
      xsd_element($prs, $child, $type);
    } else {
      die "Unknown child $child->{name}";
    }
  }
}

sub xsd_restriction
{
  my ($prs, $node, $type) = @_;
  foreach my $child (@{$node->{children}}) {
    if ($child->{name} =~ /^(xsd:)minLength$/) {
    } elsif ($child->{name} =~ /^(xsd:)enumeration$/) {
      xsd_enumeration($prs, $child, $type);
    } elsif ($child->{name} =~ /^(xsd:)totalDigits$/) {
    } elsif ($child->{name} =~ /^(xsd:)fractionDigits$/) {
    } elsif ($child->{name} =~ /^(xsd:)minInclusive$/) {
    } elsif ($child->{name} =~ /^(xsd:)maxInclusive$/) {
    } elsif ($child->{name} =~ /^(xsd:)maxLength$/) {
    } elsif ($child->{name} =~ /^(xsd:)pattern$/) {
    } else {
      die "Unknown child $child->{name}";
    }
  }
}

sub xsd_enumeration
{
  my ($prs, $node, $type) = @_;
  my $value = $node->{attrs}{value};
  if (length($value)) {
    push @{$type->{enum}}, $value;
  }
}

sub xsd_extensions
{
  my $prs = shift;
  while (1) {
    my $extensions = 0;
    foreach my $typename (keys(%{$prs->{types}})) {
      my $type = $prs->{types}{$typename};
      if (length($type->{extends})) {
        my $extendstype = $prs->{types}{$type->{extends}}
          || die "Could not find extension $type->{extends}";
        foreach my $extendsmember (keys(%{$extendstype->{members}})) {
          $type->{members}{$extendsmember}
            = $extendstype->{members}{$extendsmember};
        }
        foreach my $extendsattr (keys(%{$extendstype->{attrs}})) {
          $type->{attrs}{$extendsattr}
            = $extendstype->{attrs}{$extendsattr};
        }
        foreach my $enumitem (@{$extendstype->{enum}}) {
          push @{$type->{enum}}, $enumitem;
        }
        delete $type->{extends};
        if ($extendstype->{extends}) {
          $type->{extends} = $extendstype->{extends};
        }
        ++$extensions;
      }
    }
    last if ($extensions == 0);
  }
}

sub parse_xsd_secondrun
{
  my $prs = shift;
  xsd_extensions($prs);
}

1;
