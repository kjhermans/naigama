#!/usr/bin/perl

##
## Copyright 2015 K.J. Hermans
##

my $dir = shift @ARGV;
my $hdef = $dir;
$hdef =~ s/\r?\n$//;
$hdef =~ s/[\/.]/_/g;
$hdef = uc($hdef);

print "/**
* \\file
* \\brief This file is an autogenerated function prototypes header file.
*
* Copyright 2018 K.J. Hermans
* WARNING: This file is automatically generated. Any changes will be lost.
*/

#ifndef _$hdef" . "_FUNCTIONS_H_
#define _$hdef" . "_FUNCTIONS_H_

";

if (-f "$dir/fprefix.h") { system("cat $dir/fprefix.h"); }

find($dir, 'enter_code', 1);

sub find {
  my $dir = shift || '.';
  my $func = shift;
  my $norecurse = shift;
  if (opendir(DIR, $dir)) {
    my @subdirs;
    my @files;
    while (my $entry = readdir(DIR)) {
      next if ($entry eq '.' || $entry eq '..');
      my $path = "$dir/$entry";
      if (-d $path) {
        push @subdirs, $path;
      } elsif (-f $path && $path =~ /\.c$/) {
        my $ident = $entry;
        $ident =~ s/\.c$//;
        push @files, [ $path, $ident ];
      }
    }
    closedir(DIR);
    foreach my $file (sort { $a->[0] cmp $b->[0] } @files) {
      &$func(@{$file});
    }
    if (!$norecurse) {
      foreach my $subdir (sort @subdirs) {
        find($subdir, $func);
      }
    }
  }
}

sub enter_code {
  my ($path, $func) = @_;
  my $code = `cat $path`;
  $func = '[a-zA-Z_][a-zA-Z0-9_]*';
  my @types = (
    'void\*?',
    'int\*?',
    'unsigned[ \t\r\n]+int\*?',
    'unsigned\*?',
    'unsigned[ \t\r\n]+char\*?',
    'uchar\*?',
    'char\*?',
    'u_int64_t\*?',
    'uint64_t\*?',
    'int64_t\*?',
    'u_int32_t\*?',
    'uint32_t\*?',
    'int32_t\*?',
    'u_int16_t\*?',
    'uint16_t\*?',
    'int16_t\*?',
    'NAIG_ERR_T',
    'NAIG_BOOL_T',
  );
  my $types = join('|', @types);
  while (1) {
    my $match = 0;
    if ($code =~ s/(static[ \t\r\n]+)?(inline[ \t\r\n]+)?(($types)[ \t\r\n]+$func)[ \t\r\n]*(\([^\{;]*\))[ \t\r\n]*\{//s) {
      my ($static, $inline, $decl, $params) = ($1, $2, $3, $5);
      if ($static !~ /^static/) {
        print "/* declared in $path */\n";
        print "extern\n$inline$decl\n  $params";
        if ($decl =~ /^void/) {
          print ";\n\n";
        } else {
          print "\n  __attribute__ ((warn_unused_result));\n\n";
        }
      }
      $match = 1;
    }
    last if (!$match);
  }
}

print "

#endif";

1;
