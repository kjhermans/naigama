
package lib.naigama.compiler;

public class Slotmap {

  public static final int SLOT_GRAMMAR_ = 0;
  public static final int SLOT_S_ = 1;
  public static final int SLOT_MULTILINECOMMENT_ = 2;
  public static final int SLOT_COMMENT_ = 3;
  public static final int SLOT___PREFIX_ = 4;
  public static final int SLOT_END_ = 5;
  public static final int SLOT_DEFINITION_ = 6;
  public static final int SLOT_SINGLE_EXPRESSION_ = 7;
  public static final int SLOT_RULE_ = 8;
  public static final int SLOT_EXPRESSION_ = 9;
  public static final int SLOT_ALTERNATIVES_ = 10;
  public static final int SLOT_TERMS_ = 11;
  public static final int SLOT_TERM_ = 12;
  public static final int SLOT_SCANMATCHER_ = 13;
  public static final int SLOT_QUANTIFIEDMATCHER_ = 14;
  public static final int SLOT_QUANTIFIER_ = 15;
  public static final int SLOT_Q_ZEROORONE_ = 16;
  public static final int SLOT_Q_ONEORMORE_ = 17;
  public static final int SLOT_Q_ZEROORMORE_ = 18;
  public static final int SLOT_Q_FROMTO_ = 19;
  public static final int SLOT_Q_FROMTO__1 = 20;
  public static final int SLOT_Q_FROMTO__2 = 21;
  public static final int SLOT_Q_UNTIL_ = 22;
  public static final int SLOT_Q_UNTIL__1 = 23;
  public static final int SLOT_Q_FROM_ = 24;
  public static final int SLOT_Q_FROM__1 = 25;
  public static final int SLOT_Q_SPECIFIC_ = 26;
  public static final int SLOT_Q_SPECIFIC__1 = 27;
  public static final int SLOT_Q_VAR_ = 28;
  public static final int SLOT_MATCHER_ = 29;
  public static final int SLOT_BITMASK_ = 30;
  public static final int SLOT_VARCAPTURE_ = 31;
  public static final int SLOT_CAPTURETYPE_ = 32;
  public static final int SLOT_TYPE_ = 33;
  public static final int SLOT_CAPTURE_ = 34;
  public static final int SLOT_GROUP_ = 35;
  public static final int SLOT_CAPTUREEND_ = 36;
  public static final int SLOT_SET_ = 37;
  public static final int SLOT_SET_NRTV = 38;
  public static final int SLOT_SET_NRTV_1 = 39;
  public static final int SLOT_SET_NRTV_2 = 40;
  public static final int SLOT_VARREFERENCE_ = 41;
  public static final int SLOT_MASK_ = 42;
  public static final int SLOT_MASK_AFAF = 43;
  public static final int SLOT_REFERENCE_ = 44;
  public static final int SLOT_LIMITEDCALL_ = 45;
  public static final int SLOT_LCMODES_ = 46;
  public static final int SLOT_LCPARAM_ = 47;
  public static final int SLOT_REPLACE_ = 48;
  public static final int SLOT_REPLACETERMS_ = 49;
  public static final int SLOT_REPLACETERM_ = 50;
  public static final int SLOT_RECYCLE_ = 51;
  public static final int SLOT_LEFTARROW_ = 52;
  public static final int SLOT_RIGHTARROW_ = 53;
  public static final int SLOT_FATARROW_ = 54;
  public static final int SLOT_NOT_ = 55;
  public static final int SLOT_AND_ = 56;
  public static final int SLOT_MACRO_ = 57;
  public static final int SLOT_ENDFORCE_ = 58;
  public static final int SLOT_HEXLITERAL_ = 59;
  public static final int SLOT_NUMBER_ = 60;
  public static final int SLOT_STRING_ = 61;
  public static final int SLOT_OR_ = 62;
  public static final int SLOT_ANY_ = 63;
  public static final int SLOT_SETNOT_ = 64;
  public static final int SLOT_IMPORTDECL_ = 65;
  public static final int SLOT_STRINGLITERAL_ = 66;
  public static final int SLOT_STRINGLITERAL_NRTV = 67;
  public static final int SLOT_KW_IMPORT_ = 68;
  public static final int SLOT_IDENT_ = 69;
  public static final int SLOT_BOPEN_ = 70;
  public static final int SLOT_BCLOSE_ = 71;
  public static final int SLOT_CBOPEN_ = 72;
  public static final int SLOT_CBCLOSE_ = 73;
  public static final int SLOT_ABOPEN_ = 74;
  public static final int SLOT_ABCLOSE_ = 75;
  public static final int SLOT_COLON_ = 76;
  public static final int SLOT_SEMICOLON_ = 77;


  private int slot = -1;
  public Slotmap(int s) { slot=s; }
  public String toString()
  {
    switch(slot) {
    case 75: return "SLOT_ABCLOSE_";
    case 74: return "SLOT_ABOPEN_";
    case 10: return "SLOT_ALTERNATIVES_";
    case 56: return "SLOT_AND_";
    case 63: return "SLOT_ANY_";
    case 71: return "SLOT_BCLOSE_";
    case 30: return "SLOT_BITMASK_";
    case 70: return "SLOT_BOPEN_";
    case 36: return "SLOT_CAPTUREEND_";
    case 32: return "SLOT_CAPTURETYPE_";
    case 34: return "SLOT_CAPTURE_";
    case 73: return "SLOT_CBCLOSE_";
    case 72: return "SLOT_CBOPEN_";
    case 76: return "SLOT_COLON_";
    case 3: return "SLOT_COMMENT_";
    case 6: return "SLOT_DEFINITION_";
    case 58: return "SLOT_ENDFORCE_";
    case 5: return "SLOT_END_";
    case 9: return "SLOT_EXPRESSION_";
    case 54: return "SLOT_FATARROW_";
    case 0: return "SLOT_GRAMMAR_";
    case 35: return "SLOT_GROUP_";
    case 59: return "SLOT_HEXLITERAL_";
    case 69: return "SLOT_IDENT_";
    case 65: return "SLOT_IMPORTDECL_";
    case 68: return "SLOT_KW_IMPORT_";
    case 46: return "SLOT_LCMODES_";
    case 47: return "SLOT_LCPARAM_";
    case 52: return "SLOT_LEFTARROW_";
    case 45: return "SLOT_LIMITEDCALL_";
    case 57: return "SLOT_MACRO_";
    case 42: return "SLOT_MASK_";
    case 43: return "SLOT_MASK_AFAF";
    case 29: return "SLOT_MATCHER_";
    case 2: return "SLOT_MULTILINECOMMENT_";
    case 55: return "SLOT_NOT_";
    case 60: return "SLOT_NUMBER_";
    case 62: return "SLOT_OR_";
    case 14: return "SLOT_QUANTIFIEDMATCHER_";
    case 15: return "SLOT_QUANTIFIER_";
    case 19: return "SLOT_Q_FROMTO_";
    case 20: return "SLOT_Q_FROMTO__1";
    case 21: return "SLOT_Q_FROMTO__2";
    case 24: return "SLOT_Q_FROM_";
    case 25: return "SLOT_Q_FROM__1";
    case 17: return "SLOT_Q_ONEORMORE_";
    case 26: return "SLOT_Q_SPECIFIC_";
    case 27: return "SLOT_Q_SPECIFIC__1";
    case 22: return "SLOT_Q_UNTIL_";
    case 23: return "SLOT_Q_UNTIL__1";
    case 28: return "SLOT_Q_VAR_";
    case 18: return "SLOT_Q_ZEROORMORE_";
    case 16: return "SLOT_Q_ZEROORONE_";
    case 51: return "SLOT_RECYCLE_";
    case 44: return "SLOT_REFERENCE_";
    case 49: return "SLOT_REPLACETERMS_";
    case 50: return "SLOT_REPLACETERM_";
    case 48: return "SLOT_REPLACE_";
    case 53: return "SLOT_RIGHTARROW_";
    case 8: return "SLOT_RULE_";
    case 13: return "SLOT_SCANMATCHER_";
    case 77: return "SLOT_SEMICOLON_";
    case 64: return "SLOT_SETNOT_";
    case 37: return "SLOT_SET_";
    case 38: return "SLOT_SET_NRTV";
    case 39: return "SLOT_SET_NRTV_1";
    case 40: return "SLOT_SET_NRTV_2";
    case 7: return "SLOT_SINGLE_EXPRESSION_";
    case 66: return "SLOT_STRINGLITERAL_";
    case 67: return "SLOT_STRINGLITERAL_NRTV";
    case 61: return "SLOT_STRING_";
    case 1: return "SLOT_S_";
    case 11: return "SLOT_TERMS_";
    case 12: return "SLOT_TERM_";
    case 33: return "SLOT_TYPE_";
    case 31: return "SLOT_VARCAPTURE_";
    case 41: return "SLOT_VARREFERENCE_";
    case 4: return "SLOT___PREFIX_";
    default: return "Unknown slot";
    }
  }
}
