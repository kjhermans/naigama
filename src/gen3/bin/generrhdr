#!/usr/bin/perl

use Data::Dumper;

##
## Expects hashes in files called 'error.pl', structured as follows:
## {
##   notfound => {
##     code => -1,
##     explicit => 'Returned when an item could not be found in a list'
##   }
## }
##
##

my $dir = shift @ARGV || '.';

my $grandhash = {};
my $reverse = {};

find($dir, 'generr');
generate();

exit 0;

##---- functions -----------------------------------------------------------##

sub find {
  my $dir = shift || '.';
  my $func = shift;
  my $norecurse = shift;
  if (opendir(DIR, $dir)) {
    my @subdirs;
    my @files;
    while (my $entry = readdir(DIR)) {
      next if ($entry eq '.' || $entry eq '..');
      my $path = "$dir/$entry";
      if (-d $path) {
        push @subdirs, $path;
      } elsif (-f $path) {
        my $ident = $entry;
        push @files, [ $path, $ident ];
      }
    }
    closedir(DIR);
    foreach my $file (sort { $a->[0] cmp $b->[0] } @files) {
      &$func(@{$file});
    }
    if (!$norecurse) {
      foreach my $subdir (sort @subdirs) {
        find($subdir, $func);
      }
    }
  }
}

sub generr
{
  my ($path, $ident) = @_;
  if ($ident eq 'error.pl') {
    absorb($path);
  }
}

sub absorb
{
  my $path = shift;
  my $perl = `cat $path`;
  my $hash = eval $perl;
  foreach my $key (sort(keys(%{$hash}))) {
    my $record = $hash->{$key};
    if (defined($grandhash->{$key})) {
      die "Error ident $key twice defined in $path\n";
    }
    if (defined($reverse->{$record->{code}})) {
      die "Error code $record->{code} twice defined in $path\n";
    }
    $grandhash->{$key} = $record;
    $reverse->{$record->{code}} = 1;
  }
}

sub generate
{
  print "/** AUTOGENERATED **/

#ifndef _NAIG_ERROR_H_
#define _NAIG_ERROR_H_
";
  foreach my $key (sort(keys(%{$grandhash}))) {
    print "#define NAIG_ERRCODE_" . uc($key) . " $grandhash->{$key}{code}\n";
  }
  print "\n";
  foreach my $key (sort(keys(%{$grandhash}))) {
    print "#define NAIG_ERR_" . uc($key) . " (NAIG_ERR_T){ .code = " .
          "NAIG_ERRCODE_" . uc($key) . " } \n";
  }
  print "
#define NAIG_ERR_SWITCH \\
";
  foreach my $key (sort(keys(%{$grandhash}))) {
    print "  case $grandhash->{$key}{code}: return \"";
    print uc($key);
    print "\";\\\n";
  }
  print "  default: return \"Unknown error\";\n";
  print "
#define NAIG_ERR_EXPLICIT_SWITCH \\
";
  foreach my $key (sort(keys(%{$grandhash}))) {
    if ($grandhash->{$key}{explicit}) {
      print "  case $grandhash->{$key}{code}: return \"";
      print $grandhash->{$key}{explicit};
      print "\";\\\n";
    } else {
      print "  case $grandhash->{$key}{code}: return \"(No explicit message given)\";\\\n";
    }
  }
  print "  default: return \"Unknown error\";\n";
  print "
#endif
";
}

1;
