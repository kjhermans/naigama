-- Naigama Grammar Grammar

GRAMMAR            <- ( DEFINITION+ / SINGLE_EXPRESSION ) END

__prefix           <- ( '--' [^\n]* '\n' / %s+ )*
END                <- !.

DEFINITION         <- RULE
SINGLE_EXPRESSION  <- EXPRESSION

RULE               <- { IDENT } OPTARGS LEFTARROW EXPRESSION
EXPRESSION         <- { TERMS } OR NOTHING /
                      { TERMS } OR EXPRESSION /
                      { TERMS } /
                      CALL

TERMS              <- { TERM }+
TERM               <- { NAMESPACE } / { ENDOWEDMATCHER }
NAMESPACE          <- NSOPEN EXPRESSION NSCLOSE
ENDOWEDMATCHER     <- { NOT / AND }? MATCHER { QUANTIFIER }?
QUANTIFIER         <- '?' /
                      '+' /
                      '*' /
                      '^' { [0-9]+ } '-' { [0-9]+ } /
                      '^' '-' { [0-9]+ } /
                      '^' { [0-9]+ } '-' /
                      '^' { [0-9]+ } /
                      '^$' { IDENT }
MATCHER            <- { ANY } /
                      { SET } /
                      { STRING } /
                      { BITMASK } /
                      { HEXLITERAL } /
                      { VARCAPTURE } /
                      { CAPTURE } /
                      { GROUP } /
                      { MACRO } /
                      { VARREFERENCE } /
                      { REFERENCE }

BITMASK            <- '|' [0-9a-fA-F]^2 '|' [0-9a-fA-F]^2 '|'

VARCAPTURE         <- CBOPEN COLON { IDENT } ( SEMICOLON { TYPE } )? COLON
                      EXPRESSION { CBCLOSE } CAPTUREEND
CAPTURE            <- CBOPEN EXPRESSION { CBCLOSE } CAPTUREEND
GROUP              <- BOPEN EXPRESSION { BCLOSE }
CAPTUREEND         <- ( REPLACE / RECYCLE / NSRANGE )?

NSRANGE            <- '#' { [0-9]+ } '-' { [0-9]+ } /
                      '#' '-' { [0-9]+ }
                      '#' { [0-9]+ }

SET                <- ABOPEN { SETNOT? } (
                        { '\\' ([nrtv\\\]] / [0-9]^3) / [^\\\]] } '-' 
                        { '\\' ([nrtv\\\]] / [0-9]^3) / [^\\\]] }
                        /
                        { '\\' ([nrtv\\\]] / [0-9]^3) / [^\\\]] }
                      )+ { ABCLOSE }

VARREFERENCE       <- '$' ( { IDENT } / { NUMBER } )
REFERENCE          <- IDENT !( OPTARGS LEFTARROW )

TYPE               <- 'uint32' /
                      'int32' /
                      'unet32' /
                      'net32' /
                      'decimal' /
                      IDENT

REPLACE            <- RIGHTARROW { REPLACETERMS }
REPLACETERMS       <- REPLACETERM+
REPLACETERM        <- { STRINGLITERAL } / { HEXLITERAL } / { VARREFERENCE }

RECYCLE            <- FATARROW { IDENT }

IDENT              <- [a-zA-Z_] [a-zA-Z_0-9]^-63
LEFTARROW          <- '<-'
RIGHTARROW         <- '->'
FATARROW           <- '=>'
NOT                <- '!'
AND                <- '&'
MACRO              <- '%' [a-zA-Z] [a-zA-Z0-9]*
HEXLITERAL         <- '0x' [0-9a-fA-F]^2
NUMBER             <- [0-9]+
STRINGLITERAL      <- '\'' ( '\\' ([nrtv\\'] / [0-9]^3) / [^'\\] )* '\''
STRING             <- STRINGLITERAL 'i'?
OR                 <- '/'
ANY                <- '.'
NOTHING            <- '...'
CBOPEN             <- '{'
COLON              <- ':'
CBCLOSE            <- '}'
BOPEN              <- '('
BCLOSE             <- ')'
ABOPEN             <- '['
ABCLOSE            <- ']'
SETNOT             <- '^'
SEMICOLON          <- ';'
COMMA              <- ','
LT                 <- '<'
GT                 <- '>'
NSOPEN             <- '[['
NSCLOSE            <- ']]'

--

OPTARGS            <- { ARGS }?
ARGS               <- BOPEN { IDENT } ( COMMA { IDENT } )* BCLOSE
CALL               <- LT { IDENT } { ARGS } GT
